//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/saxjax/developer/P4-project/GPlusPlusCompiler/GPlusPlusCompiler/OG.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class OGParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, BooleanValue=6, Number=7, WS=8, 
		COMMENT=9, ShapeDCLWord=10, PointDCLWord=11, BoolDCLWord=12, NumberDCLWord=13, 
		DrawDCLWord=14, WithAngle=15, Curve=16, Line=17, To=18, From=19, RepeatStart=20, 
		RepeatEnd=21, Until=22, DOT=23, FunctionStartWord=24, FunctionReturnWord=25, 
		Void=26, LPAREN=27, RPAREN=28, PLUS=29, MINUS=30, TIMES=31, DIV=32, POW=33, 
		LogicOperator=34, BoolOperator=35, GT=36, LT=37, EQ=38, AND=39, OR=40, 
		Assign=41, OpenScope=42, CloseScope=43, Terminator=44, Seperator=45, CoordinatePropRef=46, 
		ID=47;
	public const int
		RULE_program = 0, RULE_machineVariables = 1, RULE_machine = 2, RULE_draw = 3, 
		RULE_shapeDefinition = 4, RULE_body = 5, RULE_assignment = 6, RULE_declaration = 7, 
		RULE_booleanDeclaration = 8, RULE_numberDeclaration = 9, RULE_pointDeclaration = 10, 
		RULE_coordinateReference = 11, RULE_numberTuple = 12, RULE_expression = 13, 
		RULE_boolExpression = 14, RULE_mathExpression = 15, RULE_term = 16, RULE_factor = 17, 
		RULE_signedAtom = 18, RULE_atom = 19, RULE_command = 20, RULE_movementCommand = 21, 
		RULE_lineCommand = 22, RULE_curveCommand = 23, RULE_toCommand = 24, RULE_iterationCommand = 25, 
		RULE_numberIteration = 26, RULE_untilIteration = 27, RULE_functionDeclaration = 28, 
		RULE_returnFunctionDCL = 29, RULE_typeWord = 30, RULE_voidFunctionDCL = 31, 
		RULE_parameterDeclarations = 32, RULE_parameters = 33, RULE_functionCall = 34, 
		RULE_parameterList = 35, RULE_returnStatement = 36, RULE_numberRefence = 37, 
		RULE_valueReference = 38;
	public static readonly string[] ruleNames = {
		"program", "machineVariables", "machine", "draw", "shapeDefinition", "body", 
		"assignment", "declaration", "booleanDeclaration", "numberDeclaration", 
		"pointDeclaration", "coordinateReference", "numberTuple", "expression", 
		"boolExpression", "mathExpression", "term", "factor", "signedAtom", "atom", 
		"command", "movementCommand", "lineCommand", "curveCommand", "toCommand", 
		"iterationCommand", "numberIteration", "untilIteration", "functionDeclaration", 
		"returnFunctionDCL", "typeWord", "voidFunctionDCL", "parameterDeclarations", 
		"parameters", "functionCall", "parameterList", "returnStatement", "numberRefence", 
		"valueReference"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Xmin:'", "'Machine'", "'WorkArea'", "'size'", "'.to'", null, null, 
		null, null, "'shape'", "'point'", "'bool'", "'number'", "'draw'", "'withAngle'", 
		"'curve'", "'line'", "'to'", "'from'", "'repeat'", "'repeat.end'", "'until'", 
		"'.'", "'function'", "'return'", "'void'", "'('", "')'", "'+'", "'-'", 
		"'*'", "'/'", "'^'", null, null, "'>'", "'<'", "'=='", "'&&'", "'||'", 
		"'='", "'{'", "'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "BooleanValue", "Number", "WS", "COMMENT", 
		"ShapeDCLWord", "PointDCLWord", "BoolDCLWord", "NumberDCLWord", "DrawDCLWord", 
		"WithAngle", "Curve", "Line", "To", "From", "RepeatStart", "RepeatEnd", 
		"Until", "DOT", "FunctionStartWord", "FunctionReturnWord", "Void", "LPAREN", 
		"RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "POW", "LogicOperator", "BoolOperator", 
		"GT", "LT", "EQ", "AND", "OR", "Assign", "OpenScope", "CloseScope", "Terminator", 
		"Seperator", "CoordinatePropRef", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OG.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OGParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OGParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OGParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MachineContext machine() {
			return GetRuleContext<MachineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawContext draw() {
			return GetRuleContext<DrawContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShapeDefinitionContext[] shapeDefinition() {
			return GetRuleContexts<ShapeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShapeDefinitionContext shapeDefinition(int i) {
			return GetRuleContext<ShapeDefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			machine();
			State = 79;
			draw();
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FunctionStartWord) {
				{
				{
				State = 80;
				functionDeclaration();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ShapeDCLWord) {
				{
				{
				State = 86;
				shapeDefinition();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(OGParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(OGParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Seperator() { return GetTokens(OGParser.Seperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator(int i) {
			return GetToken(OGParser.Seperator, i);
		}
		public MachineVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machineVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMachineVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMachineVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachineVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineVariablesContext machineVariables() {
		MachineVariablesContext _localctx = new MachineVariablesContext(Context, State);
		EnterRule(_localctx, 2, RULE_machineVariables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(T__0);
			State = 93;
			Match(Number);
			State = 94;
			Match(Seperator);
			State = 95;
			Match(Number);
			State = 96;
			Match(Seperator);
			State = 97;
			Match(Number);
			State = 98;
			Match(Seperator);
			State = 99;
			Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(OGParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(OGParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OGParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MachineVariablesContext machineVariables() {
			return GetRuleContext<MachineVariablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OGParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		public MachineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineContext machine() {
		MachineContext _localctx = new MachineContext(Context, State);
		EnterRule(_localctx, 4, RULE_machine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__1);
			State = 102;
			Match(DOT);
			State = 103;
			Match(T__2);
			State = 104;
			Match(DOT);
			State = 105;
			Match(T__3);
			State = 106;
			Match(LPAREN);
			State = 107;
			machineVariables();
			State = 108;
			Match(RPAREN);
			State = 109;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrawContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DrawDCLWord() { return GetToken(OGParser.DrawDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Terminator() { return GetTokens(OGParser.Terminator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator(int i) {
			return GetToken(OGParser.Terminator, i);
		}
		public DrawContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_draw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDraw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDraw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDraw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrawContext draw() {
		DrawContext _localctx = new DrawContext(Context, State);
		EnterRule(_localctx, 6, RULE_draw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(DrawDCLWord);
			State = 112;
			Match(OpenScope);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 113;
				Match(ID);
				State = 114;
				Match(Terminator);
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShapeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShapeDCLWord() { return GetToken(OGParser.ShapeDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		public ShapeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shapeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterShapeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitShapeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShapeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShapeDefinitionContext shapeDefinition() {
		ShapeDefinitionContext _localctx = new ShapeDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_shapeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(ShapeDCLWord);
			State = 123;
			Match(ID);
			State = 124;
			Match(OpenScope);
			State = 125;
			body();
			State = 126;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_body);
		int _la;
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				Match(OpenScope);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << Number) | (1L << PointDCLWord) | (1L << BoolDCLWord) | (1L << NumberDCLWord) | (1L << Curve) | (1L << Line) | (1L << RepeatStart) | (1L << LPAREN) | (1L << ID))) != 0)) {
					{
					State = 134;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 129;
						expression();
						}
						break;
					case 2:
						{
						State = 130;
						declaration();
						}
						break;
					case 3:
						{
						State = 131;
						assignment();
						}
						break;
					case 4:
						{
						State = 132;
						functionCall();
						}
						break;
					case 5:
						{
						State = 133;
						command();
						}
						break;
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 139;
				Match(CloseScope);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				Match(OpenScope);
				State = 141;
				body();
				State = 142;
				Match(CloseScope);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(ID);
			State = 148;
			Match(Assign);
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 149;
				Match(ID);
				}
				break;
			case 2:
				{
				State = 150;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberDeclarationContext numberDeclaration() {
			return GetRuleContext<NumberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointDeclarationContext pointDeclaration() {
			return GetRuleContext<PointDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanDeclarationContext booleanDeclaration() {
			return GetRuleContext<BooleanDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberDCLWord:
				{
				State = 153;
				numberDeclaration();
				}
				break;
			case PointDCLWord:
				{
				State = 154;
				pointDeclaration();
				}
				break;
			case BoolDCLWord:
				{
				State = 155;
				booleanDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 158;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolDCLWord() { return GetToken(OGParser.BoolDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public BooleanDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBooleanDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBooleanDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanDeclarationContext booleanDeclaration() {
		BooleanDeclarationContext _localctx = new BooleanDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_booleanDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(BoolDCLWord);
			State = 161;
			Match(ID);
			State = 162;
			Match(Assign);
			State = 163;
			boolExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDCLWord() { return GetToken(OGParser.NumberDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueReferenceContext valueReference() {
			return GetRuleContext<ValueReferenceContext>(0);
		}
		public NumberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberDeclarationContext numberDeclaration() {
		NumberDeclarationContext _localctx = new NumberDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_numberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(NumberDCLWord);
			State = 166;
			Match(ID);
			State = 167;
			Match(Assign);
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 168;
				Match(ID);
				}
				break;
			case 2:
				{
				State = 169;
				mathExpression();
				}
				break;
			case 3:
				{
				State = 170;
				valueReference();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointDCLWord() { return GetToken(OGParser.PointDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CoordinateReferenceContext coordinateReference() {
			return GetRuleContext<CoordinateReferenceContext>(0);
		}
		public PointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointDeclarationContext pointDeclaration() {
		PointDeclarationContext _localctx = new PointDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_pointDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(PointDCLWord);
			State = 174;
			Match(ID);
			State = 175;
			Match(Assign);
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 176;
				coordinateReference();
				}
				break;
			case ID:
				{
				State = 177;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoordinateReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OGParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OGParser.RPAREN, 0); }
		public CoordinateReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coordinateReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterCoordinateReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitCoordinateReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoordinateReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoordinateReferenceContext coordinateReference() {
		CoordinateReferenceContext _localctx = new CoordinateReferenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_coordinateReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(LPAREN);
			State = 181;
			numberTuple();
			State = 182;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator() { return GetToken(OGParser.Seperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(OGParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(OGParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberRefenceContext[] numberRefence() {
			return GetRuleContexts<NumberRefenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberRefenceContext numberRefence(int i) {
			return GetRuleContext<NumberRefenceContext>(i);
		}
		public NumberTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberTupleContext numberTuple() {
		NumberTupleContext _localctx = new NumberTupleContext(Context, State);
		EnterRule(_localctx, 24, RULE_numberTuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 184;
				Match(Number);
				}
				break;
			case 2:
				{
				State = 185;
				mathExpression();
				}
				break;
			case 3:
				{
				State = 186;
				numberRefence();
				}
				break;
			}
			State = 189;
			Match(Seperator);
			State = 193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 190;
				Match(Number);
				}
				break;
			case 2:
				{
				State = 191;
				mathExpression();
				}
				break;
			case 3:
				{
				State = 192;
				numberRefence();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 195;
				mathExpression();
				}
				break;
			case 2:
				{
				State = 196;
				boolExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolOperator() { return GetToken(OGParser.BoolOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanValue() { return GetToken(OGParser.BooleanValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext[] boolExpression() {
			return GetRuleContexts<BoolExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression(int i) {
			return GetRuleContext<BoolExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicOperator() { return GetToken(OGParser.LogicOperator, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		return boolExpression(0);
	}

	private BoolExpressionContext boolExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, _parentState);
		BoolExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_boolExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				{
				State = 200;
				mathExpression();
				State = 201;
				Match(BoolOperator);
				State = 202;
				mathExpression();
				}
				}
				break;
			case 2:
				{
				State = 204;
				Match(BooleanValue);
				}
				break;
			case 3:
				{
				State = 205;
				functionCall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 213;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolExpression);
					State = 208;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 209;
					Match(LogicOperator);
					State = 210;
					boolExpression(3);
					}
					} 
				}
				State = 215;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MathExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(OGParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(OGParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(OGParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(OGParser.MINUS, i);
		}
		public MathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathExpressionContext mathExpression() {
		MathExpressionContext _localctx = new MathExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_mathExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			term();
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 217;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 218;
					term();
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIMES() { return GetTokens(OGParser.TIMES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES(int i) {
			return GetToken(OGParser.TIMES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(OGParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(OGParser.DIV, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 32, RULE_term);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			factor();
			State = 229;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 225;
					_la = TokenStream.LA(1);
					if ( !(_la==TIMES || _la==DIV) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 226;
					factor();
					}
					} 
				}
				State = 231;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignedAtomContext[] signedAtom() {
			return GetRuleContexts<SignedAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedAtomContext signedAtom(int i) {
			return GetRuleContext<SignedAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POW() { return GetTokens(OGParser.POW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW(int i) {
			return GetToken(OGParser.POW, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 34, RULE_factor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			signedAtom();
			State = 237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 233;
					Match(POW);
					State = 234;
					signedAtom();
					}
					} 
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public SignedAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterSignedAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitSignedAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedAtomContext signedAtom() {
		SignedAtomContext _localctx = new SignedAtomContext(Context, State);
		EnterRule(_localctx, 36, RULE_signedAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(OGParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OGParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OGParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 38, RULE_atom);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				Match(Number);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243;
				Match(ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244;
				Match(LPAREN);
				State = 245;
				mathExpression();
				State = 246;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 248;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IterationCommandContext iterationCommand() {
			return GetRuleContext<IterationCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MovementCommandContext movementCommand() {
			return GetRuleContext<MovementCommandContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 40, RULE_command);
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RepeatStart:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				iterationCommand();
				}
				break;
			case Curve:
			case Line:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				movementCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MovementCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineCommandContext lineCommand() {
			return GetRuleContext<LineCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveCommandContext curveCommand() {
			return GetRuleContext<CurveCommandContext>(0);
		}
		public MovementCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_movementCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMovementCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMovementCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMovementCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MovementCommandContext movementCommand() {
		MovementCommandContext _localctx = new MovementCommandContext(Context, State);
		EnterRule(_localctx, 42, RULE_movementCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Line:
				{
				State = 255;
				lineCommand();
				}
				break;
			case Curve:
				{
				State = 256;
				curveCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 259;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Line() { return GetToken(OGParser.Line, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(OGParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OGParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OGParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandContext[] toCommand() {
			return GetRuleContexts<ToCommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandContext toCommand(int i) {
			return GetRuleContext<ToCommandContext>(i);
		}
		public LineCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterLineCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitLineCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineCommandContext lineCommand() {
		LineCommandContext _localctx = new LineCommandContext(Context, State);
		EnterRule(_localctx, 44, RULE_lineCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(Line);
			State = 262;
			Match(DOT);
			State = 263;
			Match(From);
			State = 264;
			Match(LPAREN);
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 265;
				numberTuple();
				}
				break;
			case 2:
				{
				State = 266;
				Match(ID);
				}
				break;
			}
			State = 269;
			Match(RPAREN);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 270;
				toCommand();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__4 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurveCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Curve() { return GetToken(OGParser.Curve, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(OGParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(OGParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WithAngle() { return GetToken(OGParser.WithAngle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(OGParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(OGParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(OGParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(OGParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(OGParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(OGParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandContext toCommand() {
			return GetRuleContext<ToCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public CurveCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_curveCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterCurveCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitCurveCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurveCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurveCommandContext curveCommand() {
		CurveCommandContext _localctx = new CurveCommandContext(Context, State);
		EnterRule(_localctx, 46, RULE_curveCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(Curve);
			State = 276;
			Match(DOT);
			State = 277;
			Match(WithAngle);
			State = 278;
			Match(LPAREN);
			State = 279;
			Match(Number);
			State = 280;
			Match(RPAREN);
			State = 281;
			Match(DOT);
			State = 282;
			Match(From);
			State = 283;
			Match(LPAREN);
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 284;
				numberTuple();
				}
				break;
			case 2:
				{
				State = 285;
				Match(ID);
				}
				break;
			}
			State = 288;
			Match(RPAREN);
			State = 289;
			toCommand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OGParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OGParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public ToCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterToCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitToCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToCommandContext toCommand() {
		ToCommandContext _localctx = new ToCommandContext(Context, State);
		EnterRule(_localctx, 48, RULE_toCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(T__4);
			State = 292;
			Match(LPAREN);
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 293;
				numberTuple();
				}
				break;
			case 2:
				{
				State = 294;
				Match(ID);
				}
				break;
			}
			State = 297;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberIterationContext numberIteration() {
			return GetRuleContext<NumberIterationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilIterationContext untilIteration() {
			return GetRuleContext<UntilIterationContext>(0);
		}
		public IterationCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterIterationCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitIterationCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationCommandContext iterationCommand() {
		IterationCommandContext _localctx = new IterationCommandContext(Context, State);
		EnterRule(_localctx, 50, RULE_iterationCommand);
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				numberIteration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				untilIteration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberIterationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatStart() { return GetToken(OGParser.RepeatStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OGParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(OGParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OGParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatEnd() { return GetToken(OGParser.RepeatEnd, 0); }
		public NumberIterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberIteration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberIteration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberIterationContext numberIteration() {
		NumberIterationContext _localctx = new NumberIterationContext(Context, State);
		EnterRule(_localctx, 52, RULE_numberIteration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(RepeatStart);
			State = 304;
			Match(LPAREN);
			State = 305;
			Match(Number);
			State = 306;
			Match(RPAREN);
			State = 307;
			body();
			State = 308;
			Match(RepeatEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilIterationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatStart() { return GetToken(OGParser.RepeatStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(OGParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OGParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OGParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatEnd() { return GetToken(OGParser.RepeatEnd, 0); }
		public UntilIterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilIteration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterUntilIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitUntilIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilIteration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilIterationContext untilIteration() {
		UntilIterationContext _localctx = new UntilIterationContext(Context, State);
		EnterRule(_localctx, 54, RULE_untilIteration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(RepeatStart);
			State = 311;
			Match(DOT);
			State = 312;
			Match(Until);
			State = 313;
			Match(LPAREN);
			State = 314;
			boolExpression(0);
			State = 315;
			Match(RPAREN);
			State = 316;
			body();
			State = 317;
			Match(RepeatEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnFunctionDCLContext returnFunctionDCL() {
			return GetRuleContext<ReturnFunctionDCLContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VoidFunctionDCLContext voidFunctionDCL() {
			return GetRuleContext<VoidFunctionDCLContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionDeclaration);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319;
				returnFunctionDCL();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320;
				voidFunctionDCL();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnFunctionDCLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionStartWord() { return GetToken(OGParser.FunctionStartWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeWordContext typeWord() {
			return GetRuleContext<TypeWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationsContext parameterDeclarations() {
			return GetRuleContext<ParameterDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		public ReturnFunctionDCLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnFunctionDCL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterReturnFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitReturnFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnFunctionDCL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnFunctionDCLContext returnFunctionDCL() {
		ReturnFunctionDCLContext _localctx = new ReturnFunctionDCLContext(Context, State);
		EnterRule(_localctx, 58, RULE_returnFunctionDCL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(FunctionStartWord);
			State = 324;
			typeWord();
			State = 325;
			Match(ID);
			State = 326;
			parameterDeclarations();
			State = 327;
			Match(OpenScope);
			State = 328;
			body();
			State = 329;
			returnStatement();
			State = 330;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointDCLWord() { return GetToken(OGParser.PointDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolDCLWord() { return GetToken(OGParser.BoolDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDCLWord() { return GetToken(OGParser.NumberDCLWord, 0); }
		public TypeWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterTypeWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitTypeWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeWordContext typeWord() {
		TypeWordContext _localctx = new TypeWordContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PointDCLWord) | (1L << BoolDCLWord) | (1L << NumberDCLWord))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidFunctionDCLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionStartWord() { return GetToken(OGParser.FunctionStartWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(OGParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationsContext parameterDeclarations() {
			return GetRuleContext<ParameterDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		public VoidFunctionDCLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidFunctionDCL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterVoidFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitVoidFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidFunctionDCL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidFunctionDCLContext voidFunctionDCL() {
		VoidFunctionDCLContext _localctx = new VoidFunctionDCLContext(Context, State);
		EnterRule(_localctx, 62, RULE_voidFunctionDCL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(FunctionStartWord);
			State = 335;
			Match(Void);
			State = 336;
			Match(ID);
			State = 337;
			parameterDeclarations();
			State = 338;
			Match(OpenScope);
			State = 339;
			body();
			State = 340;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OGParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OGParser.RPAREN, 0); }
		public ParameterDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterParameterDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitParameterDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationsContext parameterDeclarations() {
		ParameterDeclarationsContext _localctx = new ParameterDeclarationsContext(Context, State);
		EnterRule(_localctx, 64, RULE_parameterDeclarations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(LPAREN);
			State = 343;
			parameters();
			State = 344;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeWordContext[] typeWord() {
			return GetRuleContexts<TypeWordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeWordContext typeWord(int i) {
			return GetRuleContext<TypeWordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Seperator() { return GetTokens(OGParser.Seperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator(int i) {
			return GetToken(OGParser.Seperator, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 66, RULE_parameters);
		try {
			int _alt;
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PointDCLWord:
			case BoolDCLWord:
			case NumberDCLWord:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 346;
						typeWord();
						State = 347;
						Match(ID);
						State = 348;
						Match(Seperator);
						}
						} 
					}
					State = 354;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 355;
				typeWord();
				State = 356;
				Match(ID);
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OGParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OGParser.RPAREN, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(ID);
			State = 362;
			Match(LPAREN);
			State = 363;
			parameterList();
			State = 364;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Seperator() { return GetTokens(OGParser.Seperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator(int i) {
			return GetToken(OGParser.Seperator, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 70, RULE_parameterList);
		try {
			int _alt;
			State = 381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BooleanValue:
			case Number:
			case LPAREN:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 368;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
						case 1:
							{
							State = 366;
							Match(ID);
							}
							break;
						case 2:
							{
							State = 367;
							expression();
							}
							break;
						}
						State = 370;
						Match(Seperator);
						}
						} 
					}
					State = 375;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 378;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 376;
					Match(ID);
					}
					break;
				case 2:
					{
					State = 377;
					expression();
					}
					break;
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionReturnWord() { return GetToken(OGParser.FunctionReturnWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(FunctionReturnWord);
			State = 386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 384;
				Match(ID);
				}
				break;
			case 2:
				{
				State = 385;
				expression();
				}
				break;
			}
			State = 388;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberRefenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(OGParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CoordinatePropRef() { return GetToken(OGParser.CoordinatePropRef, 0); }
		public NumberRefenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberRefence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberRefence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberRefence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRefence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberRefenceContext numberRefence() {
		NumberRefenceContext _localctx = new NumberRefenceContext(Context, State);
		EnterRule(_localctx, 74, RULE_numberRefence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==CoordinatePropRef) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(OGParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanValue() { return GetToken(OGParser.BooleanValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CoordinatePropRef() { return GetToken(OGParser.CoordinatePropRef, 0); }
		public ValueReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterValueReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitValueReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueReferenceContext valueReference() {
		ValueReferenceContext _localctx = new ValueReferenceContext(Context, State);
		EnterRule(_localctx, 76, RULE_valueReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << Number) | (1L << CoordinatePropRef) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return boolExpression_sempred((BoolExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolExpression_sempred(BoolExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x31', '\x18D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'T', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', 'W', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 'Z', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', ']', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', 'v', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', 'y', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x89', '\n', '\a', '\f', '\a', '\xE', '\a', '\x8C', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x94', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x9A', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x9F', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xAE', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xB5', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xBE', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xC4', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC8', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xD1', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xD6', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\xD9', '\v', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\xDE', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\xE1', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\xE6', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\xE9', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\xEE', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xF1', '\v', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\xFC', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x100', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x104', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x10E', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x6', '\x18', '\x112', 
		'\n', '\x18', '\r', '\x18', '\xE', '\x18', '\x113', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x121', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x12A', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x130', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x144', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', '\x161', '\n', '#', 
		'\f', '#', '\xE', '#', '\x164', '\v', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x5', '#', '\x16A', '\n', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x5', '%', 
		'\x173', '\n', '%', '\x3', '%', '\a', '%', '\x176', '\n', '%', '\f', '%', 
		'\xE', '%', '\x179', '\v', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x17D', 
		'\n', '%', '\x3', '%', '\x5', '%', '\x180', '\n', '%', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x5', '&', '\x185', '\n', '&', '\x3', '&', '\x3', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x2', '\x3', 
		'\x1E', ')', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', '\x2', '\a', '\x3', '\x2', 
		'\x1F', ' ', '\x3', '\x2', '!', '\"', '\x3', '\x2', '\r', '\xF', '\x4', 
		'\x2', '\t', '\t', '\x30', '\x30', '\x4', '\x2', '\b', '\t', '\x30', '\x31', 
		'\x2', '\x192', '\x2', 'P', '\x3', '\x2', '\x2', '\x2', '\x4', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'g', '\x3', '\x2', '\x2', '\x2', '\b', 'q', 
		'\x3', '\x2', '\x2', '\x2', '\n', '|', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\xE', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xD0', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\"', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xEA', '\x3', '\x2', '\x2', '\x2', '&', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xFB', '\x3', '\x2', '\x2', '\x2', '*', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', ',', '\x103', '\x3', '\x2', '\x2', '\x2', '.', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x125', '\x3', '\x2', '\x2', '\x2', '\x34', '\x12F', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x131', '\x3', '\x2', '\x2', '\x2', '\x38', '\x138', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x145', '\x3', '\x2', '\x2', '\x2', '>', '\x14E', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x150', '\x3', '\x2', '\x2', '\x2', '\x42', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x16B', '\x3', '\x2', '\x2', '\x2', 'H', '\x17F', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x181', '\x3', '\x2', '\x2', '\x2', 'L', '\x188', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x5', '\x6', '\x4', '\x2', 'Q', 'U', '\x5', '\b', '\x5', '\x2', 
		'R', 'T', '\x5', ':', '\x1E', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '[', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x5', '\n', '\x6', '\x2', 
		'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', 
		'[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\\', '\x3', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\a', '\x3', '\x2', '\x2', '_', '`', '\a', '\t', 
		'\x2', '\x2', '`', '\x61', '\a', '/', '\x2', '\x2', '\x61', '\x62', '\a', 
		'\t', '\x2', '\x2', '\x62', '\x63', '\a', '/', '\x2', '\x2', '\x63', '\x64', 
		'\a', '\t', '\x2', '\x2', '\x64', '\x65', '\a', '/', '\x2', '\x2', '\x65', 
		'\x66', '\a', '\t', '\x2', '\x2', '\x66', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\a', '\x4', '\x2', '\x2', 'h', 'i', '\a', '\x19', '\x2', 
		'\x2', 'i', 'j', '\a', '\x5', '\x2', '\x2', 'j', 'k', '\a', '\x19', '\x2', 
		'\x2', 'k', 'l', '\a', '\x6', '\x2', '\x2', 'l', 'm', '\a', '\x1D', '\x2', 
		'\x2', 'm', 'n', '\x5', '\x4', '\x3', '\x2', 'n', 'o', '\a', '\x1E', '\x2', 
		'\x2', 'o', 'p', '\a', '.', '\x2', '\x2', 'p', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '\x10', '\x2', '\x2', 'r', 'w', '\a', ',', '\x2', 
		'\x2', 's', 't', '\a', '\x31', '\x2', '\x2', 't', 'v', '\a', '.', '\x2', 
		'\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '-', '\x2', '\x2', '{', '\t', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\a', '\f', '\x2', '\x2', '}', '~', '\a', '\x31', '\x2', 
		'\x2', '~', '\x7F', '\a', ',', '\x2', '\x2', '\x7F', '\x80', '\x5', '\f', 
		'\a', '\x2', '\x80', '\x81', '\a', '-', '\x2', '\x2', '\x81', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x8A', '\a', ',', '\x2', '\x2', '\x83', 
		'\x89', '\x5', '\x1C', '\xF', '\x2', '\x84', '\x89', '\x5', '\x10', '\t', 
		'\x2', '\x85', '\x89', '\x5', '\xE', '\b', '\x2', '\x86', '\x89', '\x5', 
		'\x46', '$', '\x2', '\x87', '\x89', '\x5', '*', '\x16', '\x2', '\x88', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x88', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x94', '\a', '-', '\x2', '\x2', '\x8E', '\x8F', '\a', ',', '\x2', '\x2', 
		'\x8F', '\x90', '\x5', '\f', '\a', '\x2', '\x90', '\x91', '\a', '-', '\x2', 
		'\x2', '\x91', '\x94', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x82', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x93', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\r', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\x31', '\x2', '\x2', '\x96', '\x99', '\a', '+', '\x2', '\x2', '\x97', 
		'\x9A', '\a', '\x31', '\x2', '\x2', '\x98', '\x9A', '\x5', '\x1C', '\xF', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\xF', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9F', '\x5', '\x14', '\v', '\x2', '\x9C', '\x9F', '\x5', '\x16', '\f', 
		'\x2', '\x9D', '\x9F', '\x5', '\x12', '\n', '\x2', '\x9E', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', '.', '\x2', '\x2', '\xA1', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\xE', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '\x31', '\x2', '\x2', '\xA4', '\xA5', '\a', '+', '\x2', 
		'\x2', '\xA5', '\xA6', '\x5', '\x1E', '\x10', '\x2', '\xA6', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\xF', '\x2', '\x2', '\xA8', 
		'\xA9', '\a', '\x31', '\x2', '\x2', '\xA9', '\xAD', '\a', '+', '\x2', 
		'\x2', '\xAA', '\xAE', '\a', '\x31', '\x2', '\x2', '\xAB', '\xAE', '\x5', 
		' ', '\x11', '\x2', '\xAC', '\xAE', '\x5', 'N', '(', '\x2', '\xAD', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB0', '\a', '\r', '\x2', '\x2', '\xB0', '\xB1', 
		'\a', '\x31', '\x2', '\x2', '\xB1', '\xB4', '\a', '+', '\x2', '\x2', '\xB2', 
		'\xB5', '\x5', '\x18', '\r', '\x2', '\xB3', '\xB5', '\a', '\x31', '\x2', 
		'\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x1D', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\x1A', '\xE', 
		'\x2', '\xB8', '\xB9', '\a', '\x1E', '\x2', '\x2', '\xB9', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBE', '\a', '\t', '\x2', '\x2', '\xBB', 
		'\xBE', '\x5', ' ', '\x11', '\x2', '\xBC', '\xBE', '\x5', 'L', '\'', '\x2', 
		'\xBD', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xC3', '\a', '/', '\x2', '\x2', '\xC0', 
		'\xC4', '\a', '\t', '\x2', '\x2', '\xC1', '\xC4', '\x5', ' ', '\x11', 
		'\x2', '\xC2', '\xC4', '\x5', 'L', '\'', '\x2', '\xC3', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC8', '\x5', ' ', '\x11', '\x2', '\xC6', '\xC8', '\x5', 
		'\x1E', '\x10', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCA', '\b', '\x10', '\x1', '\x2', '\xCA', '\xCB', '\x5', 
		' ', '\x11', '\x2', '\xCB', '\xCC', '\a', '%', '\x2', '\x2', '\xCC', '\xCD', 
		'\x5', ' ', '\x11', '\x2', '\xCD', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xD1', '\a', '\b', '\x2', '\x2', '\xCF', '\xD1', '\x5', '\x46', 
		'$', '\x2', '\xD0', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\f', '\x4', 
		'\x2', '\x2', '\xD3', '\xD4', '\a', '$', '\x2', '\x2', '\xD4', '\xD6', 
		'\x5', '\x1E', '\x10', '\x5', '\xD5', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDF', '\x5', '\"', '\x12', '\x2', '\xDB', '\xDC', '\t', '\x2', 
		'\x2', '\x2', '\xDC', '\xDE', '\x5', '\"', '\x12', '\x2', '\xDD', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '!', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE7', '\x5', '$', '\x13', '\x2', 
		'\xE3', '\xE4', '\t', '\x3', '\x2', '\x2', '\xE4', '\xE6', '\x5', '$', 
		'\x13', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEF', 
		'\x5', '&', '\x14', '\x2', '\xEB', '\xEC', '\a', '#', '\x2', '\x2', '\xEC', 
		'\xEE', '\x5', '&', '\x14', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\x5', '(', '\x15', '\x2', '\xF3', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xFC', '\a', '\t', '\x2', '\x2', '\xF5', 
		'\xFC', '\a', '\x31', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x1D', '\x2', 
		'\x2', '\xF7', '\xF8', '\x5', ' ', '\x11', '\x2', '\xF8', '\xF9', '\a', 
		'\x1E', '\x2', '\x2', '\xF9', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFC', '\x5', '\x46', '$', '\x2', '\xFB', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		')', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x100', '\x5', '\x34', '\x1B', 
		'\x2', '\xFE', '\x100', '\x5', ',', '\x17', '\x2', '\xFF', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x101', '\x104', '\x5', '.', '\x18', 
		'\x2', '\x102', '\x104', '\x5', '\x30', '\x19', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\a', 
		'.', '\x2', '\x2', '\x106', '-', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x108', '\a', '\x13', '\x2', '\x2', '\x108', '\x109', '\a', '\x19', '\x2', 
		'\x2', '\x109', '\x10A', '\a', '\x15', '\x2', '\x2', '\x10A', '\x10D', 
		'\a', '\x1D', '\x2', '\x2', '\x10B', '\x10E', '\x5', '\x1A', '\xE', '\x2', 
		'\x10C', '\x10E', '\a', '\x31', '\x2', '\x2', '\x10D', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\a', '\x1E', '\x2', 
		'\x2', '\x110', '\x112', '\x5', '\x32', '\x1A', '\x2', '\x111', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '/', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x116', '\a', '\x12', '\x2', '\x2', '\x116', '\x117', '\a', '\x19', '\x2', 
		'\x2', '\x117', '\x118', '\a', '\x11', '\x2', '\x2', '\x118', '\x119', 
		'\a', '\x1D', '\x2', '\x2', '\x119', '\x11A', '\a', '\t', '\x2', '\x2', 
		'\x11A', '\x11B', '\a', '\x1E', '\x2', '\x2', '\x11B', '\x11C', '\a', 
		'\x19', '\x2', '\x2', '\x11C', '\x11D', '\a', '\x15', '\x2', '\x2', '\x11D', 
		'\x120', '\a', '\x1D', '\x2', '\x2', '\x11E', '\x121', '\x5', '\x1A', 
		'\xE', '\x2', '\x11F', '\x121', '\a', '\x31', '\x2', '\x2', '\x120', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\a', 
		'\x1E', '\x2', '\x2', '\x123', '\x124', '\x5', '\x32', '\x1A', '\x2', 
		'\x124', '\x31', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\a', '\a', 
		'\x2', '\x2', '\x126', '\x129', '\a', '\x1D', '\x2', '\x2', '\x127', '\x12A', 
		'\x5', '\x1A', '\xE', '\x2', '\x128', '\x12A', '\a', '\x31', '\x2', '\x2', 
		'\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', '\x1E', '\x2', '\x2', '\x12C', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x130', '\x5', '\x36', '\x1C', '\x2', '\x12E', '\x130', 
		'\x5', '\x38', '\x1D', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x132', '\a', '\x16', '\x2', '\x2', '\x132', 
		'\x133', '\a', '\x1D', '\x2', '\x2', '\x133', '\x134', '\a', '\t', '\x2', 
		'\x2', '\x134', '\x135', '\a', '\x1E', '\x2', '\x2', '\x135', '\x136', 
		'\x5', '\f', '\a', '\x2', '\x136', '\x137', '\a', '\x17', '\x2', '\x2', 
		'\x137', '\x37', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\a', '\x16', 
		'\x2', '\x2', '\x139', '\x13A', '\a', '\x19', '\x2', '\x2', '\x13A', '\x13B', 
		'\a', '\x18', '\x2', '\x2', '\x13B', '\x13C', '\a', '\x1D', '\x2', '\x2', 
		'\x13C', '\x13D', '\x5', '\x1E', '\x10', '\x2', '\x13D', '\x13E', '\a', 
		'\x1E', '\x2', '\x2', '\x13E', '\x13F', '\x5', '\f', '\a', '\x2', '\x13F', 
		'\x140', '\a', '\x17', '\x2', '\x2', '\x140', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x144', '\x5', '<', '\x1F', '\x2', '\x142', '\x144', 
		'\x5', '@', '!', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x142', '\x3', '\x2', '\x2', '\x2', '\x144', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x145', '\x146', '\a', '\x1A', '\x2', '\x2', '\x146', '\x147', 
		'\x5', '>', ' ', '\x2', '\x147', '\x148', '\a', '\x31', '\x2', '\x2', 
		'\x148', '\x149', '\x5', '\x42', '\"', '\x2', '\x149', '\x14A', '\a', 
		',', '\x2', '\x2', '\x14A', '\x14B', '\x5', '\f', '\a', '\x2', '\x14B', 
		'\x14C', '\x5', 'J', '&', '\x2', '\x14C', '\x14D', '\a', '-', '\x2', '\x2', 
		'\x14D', '=', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\t', '\x4', 
		'\x2', '\x2', '\x14F', '?', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', 
		'\a', '\x1A', '\x2', '\x2', '\x151', '\x152', '\a', '\x1C', '\x2', '\x2', 
		'\x152', '\x153', '\a', '\x31', '\x2', '\x2', '\x153', '\x154', '\x5', 
		'\x42', '\"', '\x2', '\x154', '\x155', '\a', ',', '\x2', '\x2', '\x155', 
		'\x156', '\x5', '\f', '\a', '\x2', '\x156', '\x157', '\a', '-', '\x2', 
		'\x2', '\x157', '\x41', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', 
		'\a', '\x1D', '\x2', '\x2', '\x159', '\x15A', '\x5', '\x44', '#', '\x2', 
		'\x15A', '\x15B', '\a', '\x1E', '\x2', '\x2', '\x15B', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\x15D', '\x5', '>', ' ', '\x2', '\x15D', 
		'\x15E', '\a', '\x31', '\x2', '\x2', '\x15E', '\x15F', '\a', '/', '\x2', 
		'\x2', '\x15F', '\x161', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x165', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x5', '>', ' ', 
		'\x2', '\x166', '\x167', '\a', '\x31', '\x2', '\x2', '\x167', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'\x169', '\x162', '\x3', '\x2', '\x2', '\x2', '\x169', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x45', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x16C', '\a', '\x31', '\x2', '\x2', '\x16C', '\x16D', '\a', '\x1D', '\x2', 
		'\x2', '\x16D', '\x16E', '\x5', 'H', '%', '\x2', '\x16E', '\x16F', '\a', 
		'\x1E', '\x2', '\x2', '\x16F', 'G', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x173', '\a', '\x31', '\x2', '\x2', '\x171', '\x173', '\x5', '\x1C', 
		'\xF', '\x2', '\x172', '\x170', '\x3', '\x2', '\x2', '\x2', '\x172', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x176', '\a', '/', '\x2', '\x2', '\x175', '\x172', '\x3', '\x2', 
		'\x2', '\x2', '\x176', '\x179', '\x3', '\x2', '\x2', '\x2', '\x177', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x179', '\x177', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x17D', '\a', '\x31', '\x2', '\x2', '\x17B', 
		'\x17D', '\x5', '\x1C', '\xF', '\x2', '\x17C', '\x17A', '\x3', '\x2', 
		'\x2', '\x2', '\x17C', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x177', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x180', 'I', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x184', '\a', '\x1B', '\x2', '\x2', '\x182', '\x185', '\a', '\x31', '\x2', 
		'\x2', '\x183', '\x185', '\x5', '\x1C', '\xF', '\x2', '\x184', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x186', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\a', 
		'.', '\x2', '\x2', '\x187', 'K', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x189', '\t', '\x5', '\x2', '\x2', '\x189', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x18B', '\t', '\x6', '\x2', '\x2', '\x18B', 'O', '\x3', 
		'\x2', '\x2', '\x2', '$', 'U', '[', 'w', '\x88', '\x8A', '\x93', '\x99', 
		'\x9E', '\xAD', '\xB4', '\xBD', '\xC3', '\xC7', '\xD0', '\xD7', '\xDF', 
		'\xE7', '\xEF', '\xFB', '\xFF', '\x103', '\x10D', '\x113', '\x120', '\x129', 
		'\x12F', '\x143', '\x162', '\x169', '\x172', '\x177', '\x17C', '\x17F', 
		'\x184',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
