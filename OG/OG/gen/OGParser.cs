//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Martin/projects/P4/P4-project/OG/OG\OG.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class OGParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, Number=5, BooleanValue=6, WS=7, COMMENT=8, 
		ShapeDCLWord=9, PointDCLWord=10, BoolDCLWord=11, NumberDCLWord=12, DrawDCLWord=13, 
		WithAngle=14, Curve=15, Line=16, To=17, From=18, RepeatStart=19, RepeatEnd=20, 
		Until=21, DOT=22, FunctionStartWord=23, FunctionReturnWord=24, Void=25, 
		LParen=26, RParen=27, Plus_Minus=28, Plus=29, Minus=30, Mul_Div=31, Times=32, 
		Div=33, Pow=34, LogicOperator=35, BoolOperator=36, NOT=37, Assign=38, 
		OpenScope=39, CloseScope=40, Terminator=41, Seperator=42, XMIN=43, XMAX=44, 
		YMAX=45, YMIN=46, Machine=47, WorkArea=48, Size=49, If=50, Then=51, ID=52;
	public const int
		RULE_program = 0, RULE_machineSettings = 1, RULE_machineMods = 2, RULE_workAreaMod = 3, 
		RULE_workAreaModPrpts = 4, RULE_sizePrpt = 5, RULE_workAreaVars = 6, RULE_shapeDcls = 7, 
		RULE_functionDcls = 8, RULE_draw = 9, RULE_drawCommands = 10, RULE_drawCommand = 11, 
		RULE_shapeDcl = 12, RULE_body = 13, RULE_stmts = 14, RULE_stmt = 15, RULE_assignments = 16, 
		RULE_declarations = 17, RULE_commands = 18, RULE_declaration = 19, RULE_booleanDeclaration = 20, 
		RULE_numberDeclaration = 21, RULE_pointDeclaration = 22, RULE_pointReference = 23, 
		RULE_numberTuple = 24, RULE_assignment = 25, RULE_propertyAssignment = 26, 
		RULE_variableAssignment = 27, RULE_pointAssignment = 28, RULE_startPointAssignment = 29, 
		RULE_endPointAssignment = 30, RULE_expression = 31, RULE_mathExpression = 32, 
		RULE_term = 33, RULE_factor = 34, RULE_atom = 35, RULE_boolExpression = 36, 
		RULE_command = 37, RULE_movementCommand = 38, RULE_lineCommand = 39, RULE_toCommands = 40, 
		RULE_curveCommand = 41, RULE_toCommand = 42, RULE_fromCommand = 43, RULE_iterationCommand = 44, 
		RULE_numberIteration = 45, RULE_untilIteration = 46, RULE_functionDcl = 47, 
		RULE_returnFunctionDCL = 48, RULE_typeWord = 49, RULE_voidFunctionDCL = 50, 
		RULE_parameterDeclarations = 51, RULE_parameterDcl = 52, RULE_functionCall = 53, 
		RULE_passedParams = 54, RULE_passedParam = 55, RULE_returnStatement = 56, 
		RULE_startPointReference = 57, RULE_endPointReference = 58, RULE_coordinateXYValue = 59;
	public static readonly string[] ruleNames = {
		"program", "machineSettings", "machineMods", "workAreaMod", "workAreaModPrpts", 
		"sizePrpt", "workAreaVars", "shapeDcls", "functionDcls", "draw", "drawCommands", 
		"drawCommand", "shapeDcl", "body", "stmts", "stmt", "assignments", "declarations", 
		"commands", "declaration", "booleanDeclaration", "numberDeclaration", 
		"pointDeclaration", "pointReference", "numberTuple", "assignment", "propertyAssignment", 
		"variableAssignment", "pointAssignment", "startPointAssignment", "endPointAssignment", 
		"expression", "mathExpression", "term", "factor", "atom", "boolExpression", 
		"command", "movementCommand", "lineCommand", "toCommands", "curveCommand", 
		"toCommand", "fromCommand", "iterationCommand", "numberIteration", "untilIteration", 
		"functionDcl", "returnFunctionDCL", "typeWord", "voidFunctionDCL", "parameterDeclarations", 
		"parameterDcl", "functionCall", "passedParams", "passedParam", "returnStatement", 
		"startPointReference", "endPointReference", "coordinateXYValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'startPoint'", "'endPoint'", "'.x'", "'.y'", null, null, null, 
		null, "'shape'", "'point'", "'bool'", "'number'", "'draw'", "'withAngle'", 
		"'curve'", "'line'", "'to'", "'from'", "'repeat'", "'repeat.end'", "'until'", 
		"'.'", "'function'", "'return'", "'void'", "'('", "')'", null, "'+'", 
		"'-'", null, "'*'", "'/'", "'^'", null, null, "'!'", "'='", "'{'", "'}'", 
		"';'", "','", "'xmin'", "'xmax'", "'ymin'", "'ymax'", "'Machine'", "'WorkArea'", 
		"'size'", "'if'", "'then'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "Number", "BooleanValue", "WS", "COMMENT", 
		"ShapeDCLWord", "PointDCLWord", "BoolDCLWord", "NumberDCLWord", "DrawDCLWord", 
		"WithAngle", "Curve", "Line", "To", "From", "RepeatStart", "RepeatEnd", 
		"Until", "DOT", "FunctionStartWord", "FunctionReturnWord", "Void", "LParen", 
		"RParen", "Plus_Minus", "Plus", "Minus", "Mul_Div", "Times", "Div", "Pow", 
		"LogicOperator", "BoolOperator", "NOT", "Assign", "OpenScope", "CloseScope", 
		"Terminator", "Seperator", "XMIN", "XMAX", "YMAX", "YMIN", "Machine", 
		"WorkArea", "Size", "If", "Then", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OG.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OGParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OGParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OGParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgContext : ProgramContext {
		public MachineSettingsContext settings;
		public DrawContext drawFunction;
		public FunctionDclsContext functionsDeclarations;
		public ShapeDclsContext shapeDeclarations;
		[System.Diagnostics.DebuggerNonUserCode] public MachineSettingsContext machineSettings() {
			return GetRuleContext<MachineSettingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawContext draw() {
			return GetRuleContext<DrawContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDclsContext functionDcls() {
			return GetRuleContext<FunctionDclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShapeDclsContext shapeDcls() {
			return GetRuleContext<ShapeDclsContext>(0);
		}
		public ProgContext(ProgramContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			_localctx = new ProgContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			((ProgContext)_localctx).settings = machineSettings();
			State = 121;
			((ProgContext)_localctx).drawFunction = draw();
			State = 122;
			((ProgContext)_localctx).functionsDeclarations = functionDcls();
			State = 123;
			((ProgContext)_localctx).shapeDeclarations = shapeDcls();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineSettingsContext : ParserRuleContext {
		public MachineModsContext machineModifications;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Machine() { return GetToken(OGParser.Machine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MachineModsContext machineMods() {
			return GetRuleContext<MachineModsContext>(0);
		}
		public MachineSettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machineSettings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMachineSettings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMachineSettings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachineSettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineSettingsContext machineSettings() {
		MachineSettingsContext _localctx = new MachineSettingsContext(Context, State);
		EnterRule(_localctx, 2, RULE_machineSettings);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Machine:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				Match(Machine);
				State = 126;
				_localctx.machineModifications = machineMods();
				State = 127;
				Match(Terminator);
				}
				break;
			case DrawDCLWord:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineModsContext : ParserRuleContext {
		public MachineModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machineMods; } }
	 
		public MachineModsContext() { }
		public virtual void CopyFrom(MachineModsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EndOfMachineModifiersContext : MachineModsContext {
		public EndOfMachineModifiersContext(MachineModsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterEndOfMachineModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitEndOfMachineModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfMachineModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MachineModifiersContext : MachineModsContext {
		public WorkAreaModContext workAreaModifications;
		public MachineModsContext machineModifications;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorkAreaModContext workAreaMod() {
			return GetRuleContext<WorkAreaModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MachineModsContext machineMods() {
			return GetRuleContext<MachineModsContext>(0);
		}
		public MachineModifiersContext(MachineModsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMachineModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMachineModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachineModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineModsContext machineMods() {
		MachineModsContext _localctx = new MachineModsContext(Context, State);
		EnterRule(_localctx, 4, RULE_machineMods);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				_localctx = new MachineModifiersContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				Match(DOT);
				State = 133;
				((MachineModifiersContext)_localctx).workAreaModifications = workAreaMod();
				State = 134;
				((MachineModifiersContext)_localctx).machineModifications = machineMods();
				}
				break;
			case Terminator:
				_localctx = new EndOfMachineModifiersContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorkAreaModContext : ParserRuleContext {
		public WorkAreaModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_workAreaMod; } }
	 
		public WorkAreaModContext() { }
		public virtual void CopyFrom(WorkAreaModContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WorkAreaModifierContext : WorkAreaModContext {
		public WorkAreaModPrptsContext workAreaModificationProperties;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WorkArea() { return GetToken(OGParser.WorkArea, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorkAreaModPrptsContext workAreaModPrpts() {
			return GetRuleContext<WorkAreaModPrptsContext>(0);
		}
		public WorkAreaModifierContext(WorkAreaModContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterWorkAreaModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitWorkAreaModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorkAreaModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorkAreaModContext workAreaMod() {
		WorkAreaModContext _localctx = new WorkAreaModContext(Context, State);
		EnterRule(_localctx, 6, RULE_workAreaMod);
		try {
			_localctx = new WorkAreaModifierContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(WorkArea);
			State = 140;
			((WorkAreaModifierContext)_localctx).workAreaModificationProperties = workAreaModPrpts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorkAreaModPrptsContext : ParserRuleContext {
		public WorkAreaModPrptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_workAreaModPrpts; } }
	 
		public WorkAreaModPrptsContext() { }
		public virtual void CopyFrom(WorkAreaModPrptsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WorkAreaModifierPropertiesContext : WorkAreaModPrptsContext {
		public SizePrptContext sizeProperty;
		public WorkAreaModPrptsContext workAreaModificationProperties;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizePrptContext sizePrpt() {
			return GetRuleContext<SizePrptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorkAreaModPrptsContext workAreaModPrpts() {
			return GetRuleContext<WorkAreaModPrptsContext>(0);
		}
		public WorkAreaModifierPropertiesContext(WorkAreaModPrptsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterWorkAreaModifierProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitWorkAreaModifierProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorkAreaModifierProperties(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EndOfWorkAreaModifierPropertiesContext : WorkAreaModPrptsContext {
		public EndOfWorkAreaModifierPropertiesContext(WorkAreaModPrptsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterEndOfWorkAreaModifierProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitEndOfWorkAreaModifierProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndOfWorkAreaModifierProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorkAreaModPrptsContext workAreaModPrpts() {
		WorkAreaModPrptsContext _localctx = new WorkAreaModPrptsContext(Context, State);
		EnterRule(_localctx, 8, RULE_workAreaModPrpts);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new WorkAreaModifierPropertiesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 142;
				Match(DOT);
				State = 143;
				((WorkAreaModifierPropertiesContext)_localctx).sizeProperty = sizePrpt();
				State = 144;
				((WorkAreaModifierPropertiesContext)_localctx).workAreaModificationProperties = workAreaModPrpts();
				}
				break;
			case 2:
				_localctx = new EndOfWorkAreaModifierPropertiesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizePrptContext : ParserRuleContext {
		public SizePrptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizePrpt; } }
	 
		public SizePrptContext() { }
		public virtual void CopyFrom(SizePrptContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SizePropertyContext : SizePrptContext {
		public WorkAreaVarsContext workAreaVariables;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Size() { return GetToken(OGParser.Size, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorkAreaVarsContext workAreaVars() {
			return GetRuleContext<WorkAreaVarsContext>(0);
		}
		public SizePropertyContext(SizePrptContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterSizeProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitSizeProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizePrptContext sizePrpt() {
		SizePrptContext _localctx = new SizePrptContext(Context, State);
		EnterRule(_localctx, 10, RULE_sizePrpt);
		try {
			_localctx = new SizePropertyContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(Size);
			State = 150;
			Match(LParen);
			State = 151;
			((SizePropertyContext)_localctx).workAreaVariables = workAreaVars();
			State = 152;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorkAreaVarsContext : ParserRuleContext {
		public MathExpressionContext xmin;
		public MathExpressionContext xmax;
		public MathExpressionContext ymin;
		public MathExpressionContext ymax;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMIN() { return GetToken(OGParser.XMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Assign() { return GetTokens(OGParser.Assign); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign(int i) {
			return GetToken(OGParser.Assign, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Seperator() { return GetTokens(OGParser.Seperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator(int i) {
			return GetToken(OGParser.Seperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMAX() { return GetToken(OGParser.XMAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YMAX() { return GetToken(OGParser.YMAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YMIN() { return GetToken(OGParser.YMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public WorkAreaVarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_workAreaVars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterWorkAreaVars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitWorkAreaVars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorkAreaVars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorkAreaVarsContext workAreaVars() {
		WorkAreaVarsContext _localctx = new WorkAreaVarsContext(Context, State);
		EnterRule(_localctx, 12, RULE_workAreaVars);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(XMIN);
			State = 155;
			Match(Assign);
			State = 156;
			_localctx.xmin = mathExpression();
			State = 157;
			Match(Seperator);
			State = 158;
			Match(XMAX);
			State = 159;
			Match(Assign);
			State = 160;
			_localctx.xmax = mathExpression();
			State = 161;
			Match(Seperator);
			State = 162;
			Match(YMAX);
			State = 163;
			Match(Assign);
			State = 164;
			_localctx.ymin = mathExpression();
			State = 165;
			Match(Seperator);
			State = 166;
			Match(YMIN);
			State = 167;
			Match(Assign);
			State = 168;
			_localctx.ymax = mathExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShapeDclsContext : ParserRuleContext {
		public ShapeDclContext currentShapeDcl;
		public ShapeDclsContext shapeDeclarations;
		[System.Diagnostics.DebuggerNonUserCode] public ShapeDclContext shapeDcl() {
			return GetRuleContext<ShapeDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShapeDclsContext shapeDcls() {
			return GetRuleContext<ShapeDclsContext>(0);
		}
		public ShapeDclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shapeDcls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterShapeDcls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitShapeDcls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShapeDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShapeDclsContext shapeDcls() {
		ShapeDclsContext _localctx = new ShapeDclsContext(Context, State);
		EnterRule(_localctx, 14, RULE_shapeDcls);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ShapeDCLWord:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				_localctx.currentShapeDcl = shapeDcl();
				State = 171;
				_localctx.shapeDeclarations = shapeDcls();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDclContext functionDcl() {
			return GetRuleContext<FunctionDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDclsContext functionDcls() {
			return GetRuleContext<FunctionDclsContext>(0);
		}
		public FunctionDclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDcls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFunctionDcls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFunctionDcls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDclsContext functionDcls() {
		FunctionDclsContext _localctx = new FunctionDclsContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDcls);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FunctionStartWord:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				functionDcl();
				State = 177;
				functionDcls();
				}
				break;
			case Eof:
			case ShapeDCLWord:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrawContext : ParserRuleContext {
		public DrawCommandsContext shapesToDraw;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DrawDCLWord() { return GetToken(OGParser.DrawDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DrawCommandsContext drawCommands() {
			return GetRuleContext<DrawCommandsContext>(0);
		}
		public DrawContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_draw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDraw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDraw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDraw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrawContext draw() {
		DrawContext _localctx = new DrawContext(Context, State);
		EnterRule(_localctx, 18, RULE_draw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(DrawDCLWord);
			State = 183;
			Match(OpenScope);
			State = 184;
			_localctx.shapesToDraw = drawCommands();
			State = 185;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrawCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DrawCommandContext drawCommand() {
			return GetRuleContext<DrawCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawCommandsContext drawCommands() {
			return GetRuleContext<DrawCommandsContext>(0);
		}
		public DrawCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drawCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDrawCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDrawCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrawCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrawCommandsContext drawCommands() {
		DrawCommandsContext _localctx = new DrawCommandsContext(Context, State);
		EnterRule(_localctx, 20, RULE_drawCommands);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				drawCommand();
				State = 188;
				drawCommands();
				}
				break;
			case CloseScope:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrawCommandContext : ParserRuleContext {
		public DrawCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drawCommand; } }
	 
		public DrawCommandContext() { }
		public virtual void CopyFrom(DrawCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DrawCmdContext : DrawCommandContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public DrawCmdContext(DrawCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDrawCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDrawCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrawCmd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DrawFromCmdContext : DrawCommandContext {
		public IToken id;
		public FromCommandContext fromCmd;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromCommandContext fromCommand() {
			return GetRuleContext<FromCommandContext>(0);
		}
		public DrawFromCmdContext(DrawCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDrawFromCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDrawFromCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrawFromCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrawCommandContext drawCommand() {
		DrawCommandContext _localctx = new DrawCommandContext(Context, State);
		EnterRule(_localctx, 22, RULE_drawCommand);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new DrawCmdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				((DrawCmdContext)_localctx).id = Match(ID);
				State = 194;
				Match(Terminator);
				}
				break;
			case 2:
				_localctx = new DrawFromCmdContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				((DrawFromCmdContext)_localctx).id = Match(ID);
				State = 196;
				((DrawFromCmdContext)_localctx).fromCmd = fromCommand();
				State = 197;
				Match(Terminator);
				}
				break;
			case 3:
				_localctx = new DrawFromCmdContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 199;
				((DrawFromCmdContext)_localctx).id = Match(ID);
				State = 200;
				((DrawFromCmdContext)_localctx).fromCmd = fromCommand();
				State = 201;
				Match(Terminator);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShapeDclContext : ParserRuleContext {
		public IToken id;
		public BodyContext bdy;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShapeDCLWord() { return GetToken(OGParser.ShapeDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ShapeDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shapeDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterShapeDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitShapeDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShapeDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShapeDclContext shapeDcl() {
		ShapeDclContext _localctx = new ShapeDclContext(Context, State);
		EnterRule(_localctx, 24, RULE_shapeDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(ShapeDCLWord);
			State = 206;
			_localctx.id = Match(ID);
			State = 207;
			Match(OpenScope);
			State = 208;
			_localctx.bdy = body();
			State = 209;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public StmtsContext statements;
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_localctx.statements = stmts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public StmtContext currentStatement;
		public StmtsContext statements;
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 28, RULE_stmts);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PointDCLWord:
			case BoolDCLWord:
			case NumberDCLWord:
			case Curve:
			case Line:
			case RepeatStart:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				_localctx.currentStatement = stmt();
				State = 214;
				_localctx.statements = stmts();
				}
				break;
			case RepeatEnd:
			case FunctionReturnWord:
			case CloseScope:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public DeclarationContext dcl;
		public AssignmentContext assign;
		public CommandContext cmd;
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_stmt);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				_localctx.dcl = declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220;
				_localctx.assign = assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 221;
				_localctx.cmd = command();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentsContext : ParserRuleContext {
		public AssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignments; } }
	 
		public AssignmentsContext() { }
		public virtual void CopyFrom(AssignmentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssgnmentsContext : AssignmentsContext {
		public AssignmentContext assign;
		public AssignmentsContext assignmnts;
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		public AssgnmentsContext(AssignmentsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterAssgnments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitAssgnments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssgnments(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoAssignmentsDefinedContext : AssignmentsContext {
		public NoAssignmentsDefinedContext(AssignmentsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNoAssignmentsDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNoAssignmentsDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoAssignmentsDefined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentsContext assignments() {
		AssignmentsContext _localctx = new AssignmentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignments);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new AssgnmentsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				((AssgnmentsContext)_localctx).assign = assignment();
				State = 225;
				((AssgnmentsContext)_localctx).assignmnts = assignments();
				}
				break;
			case 2:
				_localctx = new NoAssignmentsDefinedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
	 
		public DeclarationsContext() { }
		public virtual void CopyFrom(DeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoDeclarationsDefinedContext : DeclarationsContext {
		public NoDeclarationsDefinedContext(DeclarationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNoDeclarationsDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNoDeclarationsDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoDeclarationsDefined(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DclsContext : DeclarationsContext {
		public DeclarationContext dcl;
		public DeclarationsContext dcls;
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public DclsContext(DeclarationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDcls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDcls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 34, RULE_declarations);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new DclsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				((DclsContext)_localctx).dcl = declaration();
				State = 231;
				((DclsContext)_localctx).dcls = declarations();
				}
				break;
			case 2:
				_localctx = new NoDeclarationsDefinedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandsContext : ParserRuleContext {
		public CommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commands; } }
	 
		public CommandsContext() { }
		public virtual void CopyFrom(CommandsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CmdsContext : CommandsContext {
		public CommandContext cmd;
		public CommandsContext cmds;
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public CmdsContext(CommandsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterCmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitCmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmds(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoCmdsDeclaredContext : CommandsContext {
		public NoCmdsDeclaredContext(CommandsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNoCmdsDeclared(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNoCmdsDeclared(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoCmdsDeclared(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandsContext commands() {
		CommandsContext _localctx = new CommandsContext(Context, State);
		EnterRule(_localctx, 36, RULE_commands);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new CmdsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				((CmdsContext)_localctx).cmd = command();
				State = 237;
				((CmdsContext)_localctx).cmds = commands();
				}
				break;
			case 2:
				_localctx = new NoCmdsDeclaredContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberDclContext : DeclarationContext {
		public NumberDeclarationContext numberDcl;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberDeclarationContext numberDeclaration() {
			return GetRuleContext<NumberDeclarationContext>(0);
		}
		public NumberDclContext(DeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointDclContext : DeclarationContext {
		public PointDeclarationContext pointDcl;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointDeclarationContext pointDeclaration() {
			return GetRuleContext<PointDeclarationContext>(0);
		}
		public PointDclContext(DeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolDclContext : DeclarationContext {
		public BooleanDeclarationContext boolDcl;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanDeclarationContext booleanDeclaration() {
			return GetRuleContext<BooleanDeclarationContext>(0);
		}
		public BoolDclContext(DeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_declaration);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberDCLWord:
				_localctx = new NumberDclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				((NumberDclContext)_localctx).numberDcl = numberDeclaration();
				State = 243;
				Match(Terminator);
				}
				break;
			case PointDCLWord:
				_localctx = new PointDclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				((PointDclContext)_localctx).pointDcl = pointDeclaration();
				State = 246;
				Match(Terminator);
				}
				break;
			case BoolDCLWord:
				_localctx = new BoolDclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 248;
				((BoolDclContext)_localctx).boolDcl = booleanDeclaration();
				State = 249;
				Match(Terminator);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanDeclarationContext : ParserRuleContext {
		public IToken id;
		public BoolExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolDCLWord() { return GetToken(OGParser.BoolDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public BooleanDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBooleanDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBooleanDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanDeclarationContext booleanDeclaration() {
		BooleanDeclarationContext _localctx = new BooleanDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_booleanDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(BoolDCLWord);
			State = 254;
			_localctx.id = Match(ID);
			State = 255;
			Match(Assign);
			State = 256;
			_localctx.value = boolExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberDeclarationContext : ParserRuleContext {
		public IToken id;
		public MathExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDCLWord() { return GetToken(OGParser.NumberDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public NumberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberDeclarationContext numberDeclaration() {
		NumberDeclarationContext _localctx = new NumberDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_numberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(NumberDCLWord);
			State = 259;
			_localctx.id = Match(ID);
			State = 260;
			Match(Assign);
			State = 261;
			_localctx.value = mathExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointDeclarationContext : ParserRuleContext {
		public PointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointDeclaration; } }
	 
		public PointDeclarationContext() { }
		public virtual void CopyFrom(PointDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PointDclIdAssignContext : PointDeclarationContext {
		public IToken id;
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointDCLWord() { return GetToken(OGParser.PointDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		public PointDclIdAssignContext(PointDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointDclIdAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointDclIdAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointDclIdAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointDclPointRefAssignContext : PointDeclarationContext {
		public IToken id;
		public PointReferenceContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointDCLWord() { return GetToken(OGParser.PointDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointReferenceContext pointReference() {
			return GetRuleContext<PointReferenceContext>(0);
		}
		public PointDclPointRefAssignContext(PointDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointDclPointRefAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointDclPointRefAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointDclPointRefAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointDeclarationContext pointDeclaration() {
		PointDeclarationContext _localctx = new PointDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_pointDeclaration);
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new PointDclPointRefAssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				Match(PointDCLWord);
				State = 264;
				((PointDclPointRefAssignContext)_localctx).id = Match(ID);
				State = 265;
				Match(Assign);
				State = 266;
				((PointDclPointRefAssignContext)_localctx).value = pointReference();
				}
				break;
			case 2:
				_localctx = new PointDclIdAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 267;
				Match(PointDCLWord);
				State = 268;
				((PointDclIdAssignContext)_localctx).id = Match(ID);
				State = 269;
				Match(Assign);
				State = 270;
				((PointDclIdAssignContext)_localctx).value = Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointReferenceContext : ParserRuleContext {
		public NumberTupleContext tuple;
		public StartPointReferenceContext startPoint;
		public EndPointReferenceContext endPoint;
		public IToken idPoint;
		public FunctionCallContext funcCall;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartPointReferenceContext startPointReference() {
			return GetRuleContext<StartPointReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndPointReferenceContext endPointReference() {
			return GetRuleContext<EndPointReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public PointReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointReferenceContext pointReference() {
		PointReferenceContext _localctx = new PointReferenceContext(Context, State);
		EnterRule(_localctx, 46, RULE_pointReference);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				Match(LParen);
				State = 274;
				_localctx.tuple = numberTuple();
				State = 275;
				Match(RParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				_localctx.startPoint = startPointReference();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				_localctx.endPoint = endPointReference();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279;
				_localctx.idPoint = Match(ID);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 280;
				_localctx.funcCall = functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberTupleContext : ParserRuleContext {
		public MathExpressionContext lhs;
		public MathExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator() { return GetToken(OGParser.Seperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public NumberTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberTupleContext numberTuple() {
		NumberTupleContext _localctx = new NumberTupleContext(Context, State);
		EnterRule(_localctx, 48, RULE_numberTuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_localctx.lhs = mathExpression();
			State = 284;
			Match(Seperator);
			State = 285;
			_localctx.rhs = mathExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment() {
			return GetRuleContext<PropertyAssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 50, RULE_assignment);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				variableAssignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288;
				propertyAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public CoordinateXYValueContext xyVal;
		public MathExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CoordinateXYValueContext coordinateXYValue() {
			return GetRuleContext<CoordinateXYValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPropertyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPropertyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 52, RULE_propertyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_localctx.xyVal = coordinateXYValue();
			State = 292;
			Match(Assign);
			State = 293;
			_localctx.value = mathExpression();
			State = 294;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
	 
		public VariableAssignmentContext() { }
		public virtual void CopyFrom(VariableAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdAssignContext : VariableAssignmentContext {
		public IToken id;
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		public IdAssignContext(VariableAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterIdAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitIdAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolAssignContext : VariableAssignmentContext {
		public IToken id;
		public BoolExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public BoolAssignContext(VariableAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallAssignContext : VariableAssignmentContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public FunctionCallAssignContext(VariableAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFunctionCallAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFunctionCallAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAssignContext : VariableAssignmentContext {
		public IToken id;
		public MathExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public NumberAssignContext(VariableAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointAssignContext : VariableAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointAssignmentContext pointAssignment() {
			return GetRuleContext<PointAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		public PointAssignContext(VariableAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 54, RULE_variableAssignment);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new IdAssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				((IdAssignContext)_localctx).id = Match(ID);
				State = 297;
				Match(Assign);
				State = 298;
				((IdAssignContext)_localctx).value = Match(ID);
				State = 299;
				Match(Terminator);
				}
				break;
			case 2:
				_localctx = new BoolAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				((BoolAssignContext)_localctx).id = Match(ID);
				State = 301;
				Match(Assign);
				State = 302;
				((BoolAssignContext)_localctx).value = boolExpression(0);
				State = 303;
				Match(Terminator);
				}
				break;
			case 3:
				_localctx = new NumberAssignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 305;
				((NumberAssignContext)_localctx).id = Match(ID);
				State = 306;
				Match(Assign);
				State = 307;
				((NumberAssignContext)_localctx).value = mathExpression();
				State = 308;
				Match(Terminator);
				}
				break;
			case 4:
				_localctx = new PointAssignContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 310;
				pointAssignment();
				State = 311;
				Match(Terminator);
				}
				break;
			case 5:
				_localctx = new FunctionCallAssignContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 313;
				((FunctionCallAssignContext)_localctx).id = Match(ID);
				State = 314;
				Match(Assign);
				State = 315;
				functionCall();
				State = 316;
				Match(Terminator);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointAssignmentContext : ParserRuleContext {
		public IToken id;
		public PointReferenceContext value;
		[System.Diagnostics.DebuggerNonUserCode] public EndPointAssignmentContext endPointAssignment() {
			return GetRuleContext<EndPointAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartPointAssignmentContext startPointAssignment() {
			return GetRuleContext<StartPointAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointReferenceContext pointReference() {
			return GetRuleContext<PointReferenceContext>(0);
		}
		public PointAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointAssignmentContext pointAssignment() {
		PointAssignmentContext _localctx = new PointAssignmentContext(Context, State);
		EnterRule(_localctx, 56, RULE_pointAssignment);
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				endPointAssignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				startPointAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322;
				_localctx.id = Match(ID);
				State = 323;
				Match(Assign);
				State = 324;
				_localctx.value = pointReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPointAssignmentContext : ParserRuleContext {
		public StartPointReferenceContext id;
		public PointReferenceContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StartPointReferenceContext startPointReference() {
			return GetRuleContext<StartPointReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointReferenceContext pointReference() {
			return GetRuleContext<PointReferenceContext>(0);
		}
		public StartPointAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPointAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterStartPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitStartPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPointAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPointAssignmentContext startPointAssignment() {
		StartPointAssignmentContext _localctx = new StartPointAssignmentContext(Context, State);
		EnterRule(_localctx, 58, RULE_startPointAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			_localctx.id = startPointReference();
			State = 328;
			Match(Assign);
			State = 329;
			_localctx.value = pointReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndPointAssignmentContext : ParserRuleContext {
		public EndPointReferenceContext id;
		public PointReferenceContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndPointReferenceContext endPointReference() {
			return GetRuleContext<EndPointReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointReferenceContext pointReference() {
			return GetRuleContext<PointReferenceContext>(0);
		}
		public EndPointAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endPointAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterEndPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitEndPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndPointAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndPointAssignmentContext endPointAssignment() {
		EndPointAssignmentContext _localctx = new EndPointAssignmentContext(Context, State);
		EnterRule(_localctx, 60, RULE_endPointAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			_localctx.id = endPointReference();
			State = 332;
			Match(Assign);
			State = 333;
			_localctx.value = pointReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_expression);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335;
				_localctx.id = Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336;
				functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 337;
				mathExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 338;
				boolExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathExpressionContext : ParserRuleContext {
		public MathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathExpression; } }
	 
		public MathExpressionContext() { }
		public virtual void CopyFrom(MathExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InfixAdditionExprContext : MathExpressionContext {
		public TermContext lhs;
		public IToken op;
		public MathExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_Minus() { return GetToken(OGParser.Plus_Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public InfixAdditionExprContext(MathExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterInfixAdditionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitInfixAdditionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixAdditionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleTermExprContext : MathExpressionContext {
		public TermContext child;
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public SingleTermExprContext(MathExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterSingleTermExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitSingleTermExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTermExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathExpressionContext mathExpression() {
		MathExpressionContext _localctx = new MathExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_mathExpression);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new InfixAdditionExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 341;
				((InfixAdditionExprContext)_localctx).lhs = term();
				State = 342;
				((InfixAdditionExprContext)_localctx).op = Match(Plus_Minus);
				State = 343;
				((InfixAdditionExprContext)_localctx).rhs = mathExpression();
				}
				break;
			case 2:
				_localctx = new SingleTermExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 345;
				((SingleTermExprContext)_localctx).child = term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InfixMultExprContext : TermContext {
		public FactorContext lhs;
		public IToken op;
		public TermContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul_Div() { return GetToken(OGParser.Mul_Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public InfixMultExprContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterInfixMultExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitInfixMultExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleTermChildContext : TermContext {
		public FactorContext child;
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public SingleTermChildContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterSingleTermChild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitSingleTermChild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTermChild(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 66, RULE_term);
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new InfixMultExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				((InfixMultExprContext)_localctx).lhs = factor();
				State = 349;
				((InfixMultExprContext)_localctx).op = Match(Mul_Div);
				State = 350;
				((InfixMultExprContext)_localctx).rhs = term();
				}
				break;
			case 2:
				_localctx = new SingleTermChildContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 352;
				((SingleTermChildContext)_localctx).child = factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PowerExprContext : FactorContext {
		public AtomContext lhs;
		public IToken pow;
		public FactorContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pow() { return GetToken(OGParser.Pow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PowerExprContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPowerExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPowerExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleAtomContext : FactorContext {
		public AtomContext child;
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public SingleAtomContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterSingleAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitSingleAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisMathExprContext : FactorContext {
		public MathExpressionContext mathExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public ParenthesisMathExprContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterParenthesisMathExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitParenthesisMathExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisMathExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 68, RULE_factor);
		try {
			State = 364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new PowerExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				((PowerExprContext)_localctx).lhs = atom();
				State = 356;
				((PowerExprContext)_localctx).pow = Match(Pow);
				State = 357;
				((PowerExprContext)_localctx).rhs = factor();
				}
				break;
			case 2:
				_localctx = new SingleAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 359;
				((SingleAtomContext)_localctx).child = atom();
				}
				break;
			case 3:
				_localctx = new ParenthesisMathExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 360;
				Match(LParen);
				State = 361;
				((ParenthesisMathExprContext)_localctx).mathExpr = mathExpression();
				State = 362;
				Match(RParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomIdContext : AtomContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public AtomIdContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterAtomId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitAtomId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : AtomContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(OGParser.Number, 0); }
		public NumberContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomfuncCallContext : AtomContext {
		public FunctionCallContext funcCall;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public AtomfuncCallContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterAtomfuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitAtomfuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomfuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomXYValueContext : AtomContext {
		public CoordinateXYValueContext xyValue;
		[System.Diagnostics.DebuggerNonUserCode] public CoordinateXYValueContext coordinateXYValue() {
			return GetRuleContext<CoordinateXYValueContext>(0);
		}
		public AtomXYValueContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterAtomXYValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitAtomXYValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomXYValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 70, RULE_atom);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new AtomfuncCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 366;
				((AtomfuncCallContext)_localctx).funcCall = functionCall();
				}
				break;
			case 2:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 367;
				((NumberContext)_localctx).value = Match(Number);
				}
				break;
			case 3:
				_localctx = new AtomXYValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 368;
				((AtomXYValueContext)_localctx).xyValue = coordinateXYValue();
				}
				break;
			case 4:
				_localctx = new AtomIdContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 369;
				((AtomIdContext)_localctx).id = Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
	 
		public BoolExpressionContext() { }
		public virtual void CopyFrom(BoolExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolExprIDContext : BoolExpressionContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public BoolExprIDContext(BoolExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolExprID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolExprID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExprID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExprBoolCompContext : BoolExpressionContext {
		public BoolExpressionContext lhs;
		public BoolExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicOperator() { return GetToken(OGParser.LogicOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext[] boolExpression() {
			return GetRuleContexts<BoolExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression(int i) {
			return GetRuleContext<BoolExpressionContext>(i);
		}
		public BoolExprBoolCompContext(BoolExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolExprBoolComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolExprBoolComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExprBoolComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisBoolExprContext : BoolExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		public ParenthesisBoolExprContext(BoolExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterParenthesisBoolExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitParenthesisBoolExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExprMathCompContext : BoolExpressionContext {
		public MathExpressionContext lhs;
		public MathExpressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolOperator() { return GetToken(OGParser.BoolOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public BoolExprMathCompContext(BoolExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolExprMathComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolExprMathComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExprMathComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExprNotPrefixContext : BoolExpressionContext {
		public BoolExpressionContext boolExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(OGParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public BoolExprNotPrefixContext(BoolExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolExprNotPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolExprNotPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExprNotPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExprTrueFalseContext : BoolExpressionContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanValue() { return GetToken(OGParser.BooleanValue, 0); }
		public BoolExprTrueFalseContext(BoolExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolExprTrueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolExprTrueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExprTrueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExprFuncCallContext : BoolExpressionContext {
		public FunctionCallContext funcCall;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public BoolExprFuncCallContext(BoolExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolExprFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolExprFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExprFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		return boolExpression(0);
	}

	private BoolExpressionContext boolExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, _parentState);
		BoolExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_boolExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				_localctx = new BoolExprIDContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 373;
				((BoolExprIDContext)_localctx).id = Match(ID);
				}
				break;
			case 2:
				{
				_localctx = new BoolExprTrueFalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 374;
				((BoolExprTrueFalseContext)_localctx).value = Match(BooleanValue);
				}
				break;
			case 3:
				{
				_localctx = new BoolExprFuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 375;
				((BoolExprFuncCallContext)_localctx).funcCall = functionCall();
				}
				break;
			case 4:
				{
				_localctx = new BoolExprMathCompContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376;
				((BoolExprMathCompContext)_localctx).lhs = mathExpression();
				State = 377;
				Match(BoolOperator);
				State = 378;
				((BoolExprMathCompContext)_localctx).rhs = mathExpression();
				}
				break;
			case 5:
				{
				_localctx = new BoolExprNotPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 380;
				Match(NOT);
				State = 381;
				((BoolExprNotPrefixContext)_localctx).boolExpr = boolExpression(2);
				}
				break;
			case 6:
				{
				_localctx = new ParenthesisBoolExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 382;
				Match(LParen);
				State = 383;
				boolExpression(0);
				State = 384;
				Match(RParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 393;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolExprBoolCompContext(new BoolExpressionContext(_parentctx, _parentState));
					((BoolExprBoolCompContext)_localctx).lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_boolExpression);
					State = 388;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 389;
					Match(LogicOperator);
					State = 390;
					((BoolExprBoolCompContext)_localctx).rhs = boolExpression(4);
					}
					} 
				}
				State = 395;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public IterationCommandContext iterCmd;
		public MovementCommandContext movementCmd;
		public DrawCommandContext drawCmd;
		[System.Diagnostics.DebuggerNonUserCode] public IterationCommandContext iterationCommand() {
			return GetRuleContext<IterationCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MovementCommandContext movementCommand() {
			return GetRuleContext<MovementCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawCommandContext drawCommand() {
			return GetRuleContext<DrawCommandContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 74, RULE_command);
		try {
			State = 399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RepeatStart:
				EnterOuterAlt(_localctx, 1);
				{
				State = 396;
				_localctx.iterCmd = iterationCommand();
				}
				break;
			case Curve:
			case Line:
				EnterOuterAlt(_localctx, 2);
				{
				State = 397;
				_localctx.movementCmd = movementCommand();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 398;
				_localctx.drawCmd = drawCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MovementCommandContext : ParserRuleContext {
		public LineCommandContext lineCmd;
		public CurveCommandContext curveCmd;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineCommandContext lineCommand() {
			return GetRuleContext<LineCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveCommandContext curveCommand() {
			return GetRuleContext<CurveCommandContext>(0);
		}
		public MovementCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_movementCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMovementCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMovementCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMovementCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MovementCommandContext movementCommand() {
		MovementCommandContext _localctx = new MovementCommandContext(Context, State);
		EnterRule(_localctx, 76, RULE_movementCommand);
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Line:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401;
				_localctx.lineCmd = lineCommand();
				State = 402;
				Match(Terminator);
				}
				break;
			case Curve:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				_localctx.curveCmd = curveCommand();
				State = 405;
				Match(Terminator);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineCommandContext : ParserRuleContext {
		public IToken type;
		public FromCommandContext fromCmd;
		public ToCommandsContext toCmds;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Line() { return GetToken(OGParser.Line, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromCommandContext fromCommand() {
			return GetRuleContext<FromCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandsContext toCommands() {
			return GetRuleContext<ToCommandsContext>(0);
		}
		public LineCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterLineCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitLineCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineCommandContext lineCommand() {
		LineCommandContext _localctx = new LineCommandContext(Context, State);
		EnterRule(_localctx, 78, RULE_lineCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			_localctx.type = Match(Line);
			State = 410;
			_localctx.fromCmd = fromCommand();
			State = 411;
			_localctx.toCmds = toCommands();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToCommandsContext : ParserRuleContext {
		public ToCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toCommands; } }
	 
		public ToCommandsContext() { }
		public virtual void CopyFrom(ToCommandsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleToCommandContext : ToCommandsContext {
		public ToCommandContext toCmd;
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandContext toCommand() {
			return GetRuleContext<ToCommandContext>(0);
		}
		public SingleToCommandContext(ToCommandsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterSingleToCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitSingleToCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleToCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChainedToCommandContext : ToCommandsContext {
		public ToCommandContext toCmd;
		public ToCommandsContext chainedToCmds;
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandContext toCommand() {
			return GetRuleContext<ToCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandsContext toCommands() {
			return GetRuleContext<ToCommandsContext>(0);
		}
		public ChainedToCommandContext(ToCommandsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterChainedToCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitChainedToCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainedToCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToCommandsContext toCommands() {
		ToCommandsContext _localctx = new ToCommandsContext(Context, State);
		EnterRule(_localctx, 80, RULE_toCommands);
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new ChainedToCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 413;
				((ChainedToCommandContext)_localctx).toCmd = toCommand();
				State = 414;
				((ChainedToCommandContext)_localctx).chainedToCmds = toCommands();
				}
				break;
			case 2:
				_localctx = new SingleToCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 416;
				((SingleToCommandContext)_localctx).toCmd = toCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurveCommandContext : ParserRuleContext {
		public IToken type;
		public IToken modifier;
		public MathExpressionContext angle;
		public FromCommandContext fromCmd;
		public ToCommandsContext toCmds;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Curve() { return GetToken(OGParser.Curve, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WithAngle() { return GetToken(OGParser.WithAngle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromCommandContext fromCommand() {
			return GetRuleContext<FromCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandsContext toCommands() {
			return GetRuleContext<ToCommandsContext>(0);
		}
		public CurveCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_curveCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterCurveCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitCurveCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurveCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurveCommandContext curveCommand() {
		CurveCommandContext _localctx = new CurveCommandContext(Context, State);
		EnterRule(_localctx, 82, RULE_curveCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			_localctx.type = Match(Curve);
			State = 420;
			Match(DOT);
			State = 421;
			_localctx.modifier = Match(WithAngle);
			State = 422;
			Match(LParen);
			State = 423;
			_localctx.angle = mathExpression();
			State = 424;
			Match(RParen);
			State = 425;
			_localctx.fromCmd = fromCommand();
			State = 426;
			_localctx.toCmds = toCommands();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToCommandContext : ParserRuleContext {
		public ToCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toCommand; } }
	 
		public ToCommandContext() { }
		public virtual void CopyFrom(ToCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToWithStartPointRefContext : ToCommandContext {
		public StartPointReferenceContext oPoint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(OGParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StartPointReferenceContext startPointReference() {
			return GetRuleContext<StartPointReferenceContext>(0);
		}
		public ToWithStartPointRefContext(ToCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterToWithStartPointRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitToWithStartPointRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToWithStartPointRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToWithIdContext : ToCommandContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(OGParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public ToWithIdContext(ToCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterToWithId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitToWithId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToWithId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToWithEndPointRefContext : ToCommandContext {
		public EndPointReferenceContext toPoint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(OGParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndPointReferenceContext endPointReference() {
			return GetRuleContext<EndPointReferenceContext>(0);
		}
		public ToWithEndPointRefContext(ToCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterToWithEndPointRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitToWithEndPointRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToWithEndPointRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToWithNumberTupleContext : ToCommandContext {
		public NumberTupleContext tuple;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(OGParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		public ToWithNumberTupleContext(ToCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterToWithNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitToWithNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToWithNumberTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToCommandContext toCommand() {
		ToCommandContext _localctx = new ToCommandContext(Context, State);
		EnterRule(_localctx, 84, RULE_toCommand);
		try {
			State = 451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new ToWithIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 428;
				Match(DOT);
				State = 429;
				Match(To);
				State = 430;
				Match(LParen);
				State = 431;
				((ToWithIdContext)_localctx).id = Match(ID);
				State = 432;
				Match(RParen);
				}
				break;
			case 2:
				_localctx = new ToWithNumberTupleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				Match(DOT);
				State = 434;
				Match(To);
				State = 435;
				Match(LParen);
				State = 436;
				((ToWithNumberTupleContext)_localctx).tuple = numberTuple();
				State = 437;
				Match(RParen);
				}
				break;
			case 3:
				_localctx = new ToWithStartPointRefContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 439;
				Match(DOT);
				State = 440;
				Match(To);
				State = 441;
				Match(LParen);
				State = 442;
				((ToWithStartPointRefContext)_localctx).oPoint = startPointReference();
				State = 443;
				Match(RParen);
				}
				break;
			case 4:
				_localctx = new ToWithEndPointRefContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 445;
				Match(DOT);
				State = 446;
				Match(To);
				State = 447;
				Match(LParen);
				State = 448;
				((ToWithEndPointRefContext)_localctx).toPoint = endPointReference();
				State = 449;
				Match(RParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromCommandContext : ParserRuleContext {
		public FromCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromCommand; } }
	 
		public FromCommandContext() { }
		public virtual void CopyFrom(FromCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FromWithIdContext : FromCommandContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(OGParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public FromWithIdContext(FromCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFromWithId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFromWithId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromWithId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FromWithStartPointRefContext : FromCommandContext {
		public StartPointReferenceContext fromPoint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(OGParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StartPointReferenceContext startPointReference() {
			return GetRuleContext<StartPointReferenceContext>(0);
		}
		public FromWithStartPointRefContext(FromCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFromWithStartPointRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFromWithStartPointRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromWithStartPointRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FromWithNumberTupleContext : FromCommandContext {
		public NumberTupleContext tuple;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(OGParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		public FromWithNumberTupleContext(FromCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFromWithNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFromWithNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromWithNumberTuple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FromWithEndPointRefContext : FromCommandContext {
		public EndPointReferenceContext fromPoint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(OGParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndPointReferenceContext endPointReference() {
			return GetRuleContext<EndPointReferenceContext>(0);
		}
		public FromWithEndPointRefContext(FromCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFromWithEndPointRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFromWithEndPointRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromWithEndPointRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromCommandContext fromCommand() {
		FromCommandContext _localctx = new FromCommandContext(Context, State);
		EnterRule(_localctx, 86, RULE_fromCommand);
		try {
			State = 476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				_localctx = new FromWithIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 453;
				Match(DOT);
				State = 454;
				Match(From);
				State = 455;
				Match(LParen);
				State = 456;
				((FromWithIdContext)_localctx).id = Match(ID);
				State = 457;
				Match(RParen);
				}
				break;
			case 2:
				_localctx = new FromWithNumberTupleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 458;
				Match(DOT);
				State = 459;
				Match(From);
				State = 460;
				Match(LParen);
				State = 461;
				((FromWithNumberTupleContext)_localctx).tuple = numberTuple();
				State = 462;
				Match(RParen);
				}
				break;
			case 3:
				_localctx = new FromWithStartPointRefContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 464;
				Match(DOT);
				State = 465;
				Match(From);
				State = 466;
				Match(LParen);
				State = 467;
				((FromWithStartPointRefContext)_localctx).fromPoint = startPointReference();
				State = 468;
				Match(RParen);
				}
				break;
			case 4:
				_localctx = new FromWithEndPointRefContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 470;
				Match(DOT);
				State = 471;
				Match(From);
				State = 472;
				Match(LParen);
				State = 473;
				((FromWithEndPointRefContext)_localctx).fromPoint = endPointReference();
				State = 474;
				Match(RParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationCommandContext : ParserRuleContext {
		public NumberIterationContext numberIterCmd;
		public UntilIterationContext untilIterCmd;
		[System.Diagnostics.DebuggerNonUserCode] public NumberIterationContext numberIteration() {
			return GetRuleContext<NumberIterationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilIterationContext untilIteration() {
			return GetRuleContext<UntilIterationContext>(0);
		}
		public IterationCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterIterationCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitIterationCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationCommandContext iterationCommand() {
		IterationCommandContext _localctx = new IterationCommandContext(Context, State);
		EnterRule(_localctx, 88, RULE_iterationCommand);
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				_localctx.numberIterCmd = numberIteration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479;
				_localctx.untilIterCmd = untilIteration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberIterationContext : ParserRuleContext {
		public MathExpressionContext iterator;
		public BodyContext statements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatStart() { return GetToken(OGParser.RepeatStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatEnd() { return GetToken(OGParser.RepeatEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public NumberIterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberIteration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberIteration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberIterationContext numberIteration() {
		NumberIterationContext _localctx = new NumberIterationContext(Context, State);
		EnterRule(_localctx, 90, RULE_numberIteration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(RepeatStart);
			State = 483;
			Match(LParen);
			State = 484;
			_localctx.iterator = mathExpression();
			State = 485;
			Match(RParen);
			State = 486;
			_localctx.statements = body();
			State = 487;
			Match(RepeatEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilIterationContext : ParserRuleContext {
		public UntilIterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilIteration; } }
	 
		public UntilIterationContext() { }
		public virtual void CopyFrom(UntilIterationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UntilConditionContext : UntilIterationContext {
		public BoolExpressionContext iterator;
		public BodyContext statements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatStart() { return GetToken(OGParser.RepeatStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(OGParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatEnd() { return GetToken(OGParser.RepeatEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public UntilConditionContext(UntilIterationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterUntilCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitUntilCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UntilFuncCallContext : UntilIterationContext {
		public FunctionCallContext iterator;
		public BodyContext statements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatStart() { return GetToken(OGParser.RepeatStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(OGParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatEnd() { return GetToken(OGParser.RepeatEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public UntilFuncCallContext(UntilIterationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterUntilFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitUntilFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilIterationContext untilIteration() {
		UntilIterationContext _localctx = new UntilIterationContext(Context, State);
		EnterRule(_localctx, 92, RULE_untilIteration);
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				_localctx = new UntilFuncCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				Match(RepeatStart);
				State = 490;
				Match(DOT);
				State = 491;
				Match(Until);
				State = 492;
				Match(LParen);
				State = 493;
				((UntilFuncCallContext)_localctx).iterator = functionCall();
				State = 494;
				Match(RParen);
				State = 495;
				((UntilFuncCallContext)_localctx).statements = body();
				State = 496;
				Match(RepeatEnd);
				}
				break;
			case 2:
				_localctx = new UntilConditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 498;
				Match(RepeatStart);
				State = 499;
				Match(DOT);
				State = 500;
				Match(Until);
				State = 501;
				Match(LParen);
				State = 502;
				((UntilConditionContext)_localctx).iterator = boolExpression(0);
				State = 503;
				Match(RParen);
				State = 504;
				((UntilConditionContext)_localctx).statements = body();
				State = 505;
				Match(RepeatEnd);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnFunctionDCLContext returnFunctionDCL() {
			return GetRuleContext<ReturnFunctionDCLContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VoidFunctionDCLContext voidFunctionDCL() {
			return GetRuleContext<VoidFunctionDCLContext>(0);
		}
		public FunctionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFunctionDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFunctionDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDclContext functionDcl() {
		FunctionDclContext _localctx = new FunctionDclContext(Context, State);
		EnterRule(_localctx, 94, RULE_functionDcl);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509;
				returnFunctionDCL();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				voidFunctionDCL();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnFunctionDCLContext : ParserRuleContext {
		public TypeWordContext type;
		public IToken funcName;
		public ParameterDeclarationsContext paramDcls;
		public BodyContext statements;
		public ReturnStatementContext returnStmt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionStartWord() { return GetToken(OGParser.FunctionStartWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeWordContext typeWord() {
			return GetRuleContext<TypeWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationsContext parameterDeclarations() {
			return GetRuleContext<ParameterDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ReturnFunctionDCLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnFunctionDCL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterReturnFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitReturnFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnFunctionDCL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnFunctionDCLContext returnFunctionDCL() {
		ReturnFunctionDCLContext _localctx = new ReturnFunctionDCLContext(Context, State);
		EnterRule(_localctx, 96, RULE_returnFunctionDCL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(FunctionStartWord);
			State = 514;
			_localctx.type = typeWord();
			State = 515;
			_localctx.funcName = Match(ID);
			State = 516;
			Match(LParen);
			State = 517;
			_localctx.paramDcls = parameterDeclarations();
			State = 518;
			Match(RParen);
			State = 519;
			Match(OpenScope);
			State = 520;
			_localctx.statements = body();
			State = 521;
			_localctx.returnStmt = returnStatement();
			State = 522;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointDCLWord() { return GetToken(OGParser.PointDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolDCLWord() { return GetToken(OGParser.BoolDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDCLWord() { return GetToken(OGParser.NumberDCLWord, 0); }
		public TypeWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterTypeWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitTypeWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeWordContext typeWord() {
		TypeWordContext _localctx = new TypeWordContext(Context, State);
		EnterRule(_localctx, 98, RULE_typeWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PointDCLWord) | (1L << BoolDCLWord) | (1L << NumberDCLWord))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidFunctionDCLContext : ParserRuleContext {
		public IToken type;
		public IToken id;
		public ParameterDeclarationsContext paramDcls;
		public BodyContext statements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionStartWord() { return GetToken(OGParser.FunctionStartWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(OGParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationsContext parameterDeclarations() {
			return GetRuleContext<ParameterDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public VoidFunctionDCLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidFunctionDCL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterVoidFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitVoidFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidFunctionDCL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidFunctionDCLContext voidFunctionDCL() {
		VoidFunctionDCLContext _localctx = new VoidFunctionDCLContext(Context, State);
		EnterRule(_localctx, 100, RULE_voidFunctionDCL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			Match(FunctionStartWord);
			State = 527;
			_localctx.type = Match(Void);
			State = 528;
			_localctx.id = Match(ID);
			State = 529;
			Match(LParen);
			State = 530;
			_localctx.paramDcls = parameterDeclarations();
			State = 531;
			Match(RParen);
			State = 532;
			Match(OpenScope);
			State = 533;
			_localctx.statements = body();
			State = 534;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationsContext : ParserRuleContext {
		public ParameterDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarations; } }
	 
		public ParameterDeclarationsContext() { }
		public virtual void CopyFrom(ParameterDeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiParamDclContext : ParameterDeclarationsContext {
		public ParameterDclContext currentParamDcl;
		public ParameterDeclarationsContext paramDcls;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator() { return GetToken(OGParser.Seperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDclContext parameterDcl() {
			return GetRuleContext<ParameterDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationsContext parameterDeclarations() {
			return GetRuleContext<ParameterDeclarationsContext>(0);
		}
		public MultiParamDclContext(ParameterDeclarationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMultiParamDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMultiParamDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiParamDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoParamsDclContext : ParameterDeclarationsContext {
		public NoParamsDclContext(ParameterDeclarationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNoParamsDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNoParamsDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoParamsDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleParamDclContext : ParameterDeclarationsContext {
		public ParameterDclContext paramDcl;
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDclContext parameterDcl() {
			return GetRuleContext<ParameterDclContext>(0);
		}
		public SingleParamDclContext(ParameterDeclarationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterSingleParamDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitSingleParamDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleParamDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationsContext parameterDeclarations() {
		ParameterDeclarationsContext _localctx = new ParameterDeclarationsContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameterDeclarations);
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				_localctx = new MultiParamDclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 536;
				((MultiParamDclContext)_localctx).currentParamDcl = parameterDcl();
				State = 537;
				Match(Seperator);
				State = 538;
				((MultiParamDclContext)_localctx).paramDcls = parameterDeclarations();
				}
				break;
			case 2:
				_localctx = new SingleParamDclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 540;
				((SingleParamDclContext)_localctx).paramDcl = parameterDcl();
				}
				break;
			case 3:
				_localctx = new NoParamsDclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDclContext : ParserRuleContext {
		public TypeWordContext type;
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public TypeWordContext typeWord() {
			return GetRuleContext<TypeWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public ParameterDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterParameterDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitParameterDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDclContext parameterDcl() {
		ParameterDclContext _localctx = new ParameterDclContext(Context, State);
		EnterRule(_localctx, 104, RULE_parameterDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			_localctx.type = typeWord();
			State = 545;
			_localctx.id = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IToken id;
		public PassedParamsContext @params;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PassedParamsContext passedParams() {
			return GetRuleContext<PassedParamsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 106, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			_localctx.id = Match(ID);
			State = 548;
			Match(LParen);
			State = 549;
			_localctx.@params = passedParams();
			State = 550;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassedParamsContext : ParserRuleContext {
		public PassedParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passedParams; } }
	 
		public PassedParamsContext() { }
		public virtual void CopyFrom(PassedParamsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiParametersContext : PassedParamsContext {
		public PassedParamContext firstParameter;
		public PassedParamsContext @params;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator() { return GetToken(OGParser.Seperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PassedParamContext passedParam() {
			return GetRuleContext<PassedParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassedParamsContext passedParams() {
			return GetRuleContext<PassedParamsContext>(0);
		}
		public MultiParametersContext(PassedParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMultiParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMultiParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiParameters(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleParameterContext : PassedParamsContext {
		public PassedParamContext parameter;
		[System.Diagnostics.DebuggerNonUserCode] public PassedParamContext passedParam() {
			return GetRuleContext<PassedParamContext>(0);
		}
		public SingleParameterContext(PassedParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterSingleParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitSingleParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoParameterContext : PassedParamsContext {
		public NoParameterContext(PassedParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNoParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNoParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PassedParamsContext passedParams() {
		PassedParamsContext _localctx = new PassedParamsContext(Context, State);
		EnterRule(_localctx, 108, RULE_passedParams);
		try {
			State = 558;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				_localctx = new MultiParametersContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 552;
				((MultiParametersContext)_localctx).firstParameter = passedParam();
				State = 553;
				Match(Seperator);
				State = 554;
				((MultiParametersContext)_localctx).@params = passedParams();
				}
				break;
			case 2:
				_localctx = new SingleParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 556;
				((SingleParameterContext)_localctx).parameter = passedParam();
				}
				break;
			case 3:
				_localctx = new NoParameterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassedParamContext : ParserRuleContext {
		public PassedParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passedParam; } }
	 
		public PassedParamContext() { }
		public virtual void CopyFrom(PassedParamContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PassedStartPointReferenceContext : PassedParamContext {
		public StartPointReferenceContext startpointRef;
		[System.Diagnostics.DebuggerNonUserCode] public StartPointReferenceContext startPointReference() {
			return GetRuleContext<StartPointReferenceContext>(0);
		}
		public PassedStartPointReferenceContext(PassedParamContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPassedStartPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPassedStartPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassedStartPointReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PassedFunctionCallContext : PassedParamContext {
		public FunctionCallContext funcCall;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public PassedFunctionCallContext(PassedParamContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPassedFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPassedFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassedFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PassedEndPointReferenceContext : PassedParamContext {
		public EndPointReferenceContext endpointRef;
		[System.Diagnostics.DebuggerNonUserCode] public EndPointReferenceContext endPointReference() {
			return GetRuleContext<EndPointReferenceContext>(0);
		}
		public PassedEndPointReferenceContext(PassedParamContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPassedEndPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPassedEndPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassedEndPointReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PassedIDContext : PassedParamContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public PassedIDContext(PassedParamContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPassedID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPassedID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassedID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PassedDirectValueContext : PassedParamContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PassedDirectValueContext(PassedParamContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPassedDirectValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPassedDirectValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassedDirectValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PassedParamContext passedParam() {
		PassedParamContext _localctx = new PassedParamContext(Context, State);
		EnterRule(_localctx, 110, RULE_passedParam);
		try {
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				_localctx = new PassedIDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 560;
				((PassedIDContext)_localctx).id = Match(ID);
				}
				break;
			case 2:
				_localctx = new PassedFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 561;
				((PassedFunctionCallContext)_localctx).funcCall = functionCall();
				}
				break;
			case 3:
				_localctx = new PassedDirectValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 562;
				((PassedDirectValueContext)_localctx).expr = expression();
				}
				break;
			case 4:
				_localctx = new PassedEndPointReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 563;
				((PassedEndPointReferenceContext)_localctx).endpointRef = endPointReference();
				}
				break;
			case 5:
				_localctx = new PassedStartPointReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 564;
				((PassedStartPointReferenceContext)_localctx).startpointRef = startPointReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	 
		public ReturnStatementContext() { }
		public virtual void CopyFrom(ReturnStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReturnValueReferenceContext : ReturnStatementContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionReturnWord() { return GetToken(OGParser.FunctionReturnWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public ReturnValueReferenceContext(ReturnStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterReturnValueReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitReturnValueReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnValueReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnDirectValueContext : ReturnStatementContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionReturnWord() { return GetToken(OGParser.FunctionReturnWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnDirectValueContext(ReturnStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterReturnDirectValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitReturnDirectValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnDirectValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_returnStatement);
		try {
			State = 574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new ReturnValueReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				Match(FunctionReturnWord);
				State = 568;
				((ReturnValueReferenceContext)_localctx).id = Match(ID);
				State = 569;
				Match(Terminator);
				}
				break;
			case 2:
				_localctx = new ReturnDirectValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 570;
				Match(FunctionReturnWord);
				State = 571;
				((ReturnDirectValueContext)_localctx).expr = expression();
				State = 572;
				Match(Terminator);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPointReferenceContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public StartPointReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPointReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterStartPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitStartPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPointReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPointReferenceContext startPointReference() {
		StartPointReferenceContext _localctx = new StartPointReferenceContext(Context, State);
		EnterRule(_localctx, 114, RULE_startPointReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			_localctx.id = Match(ID);
			State = 577;
			Match(DOT);
			State = 578;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndPointReferenceContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public EndPointReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endPointReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterEndPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitEndPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndPointReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndPointReferenceContext endPointReference() {
		EndPointReferenceContext _localctx = new EndPointReferenceContext(Context, State);
		EnterRule(_localctx, 116, RULE_endPointReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			_localctx.id = Match(ID);
			State = 581;
			Match(DOT);
			State = 582;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoordinateXYValueContext : ParserRuleContext {
		public IToken id;
		public IToken xy;
		public StartPointReferenceContext startPoint;
		public EndPointReferenceContext endPoint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StartPointReferenceContext startPointReference() {
			return GetRuleContext<StartPointReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndPointReferenceContext endPointReference() {
			return GetRuleContext<EndPointReferenceContext>(0);
		}
		public CoordinateXYValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coordinateXYValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterCoordinateXYValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitCoordinateXYValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoordinateXYValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoordinateXYValueContext coordinateXYValue() {
		CoordinateXYValueContext _localctx = new CoordinateXYValueContext(Context, State);
		EnterRule(_localctx, 118, RULE_coordinateXYValue);
		try {
			State = 596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 584;
				_localctx.id = Match(ID);
				State = 585;
				_localctx.xy = Match(T__2);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 586;
				_localctx.id = Match(ID);
				State = 587;
				_localctx.xy = Match(T__3);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 590;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 588;
					_localctx.startPoint = startPointReference();
					}
					break;
				case 2:
					{
					State = 589;
					_localctx.endPoint = endPointReference();
					}
					break;
				}
				State = 594;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 592;
					_localctx.xy = Match(T__2);
					}
					break;
				case T__3:
					{
					State = 593;
					_localctx.xy = Match(T__3);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 36: return boolExpression_sempred((BoolExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolExpression_sempred(BoolExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x259', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x85', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x8C', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x96', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB1', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xB7', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xC2', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xCE', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xDC', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\xE1', '\n', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xE7', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\xED', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xF3', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xFE', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x112', '\n', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x11C', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x124', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x141', '\n', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x148', 
		'\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x5', '!', '\x156', '\n', '!', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x15D', '\n', 
		'\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x164', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', 
		'\x16F', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x175', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x185', '\n', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', '\x18A', '\n', '&', 
		'\f', '&', '\xE', '&', '\x18D', '\v', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x5', '\'', '\x192', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x19A', '\n', '(', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x5', '*', '\x1A4', '\n', '*', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x5', ',', '\x1C6', '\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x5', '-', '\x1DF', '\n', '-', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x1E3', '\n', '.', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x1FE', '\n', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x5', '\x31', '\x202', '\n', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x221', '\n', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x231', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x5', '\x39', '\x238', '\n', '\x39', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x5', ':', '\x241', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x251', 
		'\n', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x255', '\n', '=', '\x5', 
		'=', '\x257', '\n', '=', '\x3', '=', '\x2', '\x3', 'J', '>', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', '\x2', '\x3', 
		'\x3', '\x2', '\f', '\xE', '\x2', '\x262', '\x2', 'z', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x84', '\x3', '\x2', '\x2', '\x2', '\x6', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x8D', '\x3', '\x2', '\x2', '\x2', '\n', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x10', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xE0', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '$', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xF2', '\x3', '\x2', '\x2', '\x2', '(', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xFF', '\x3', '\x2', '\x2', '\x2', ',', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x111', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x32', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x123', '\x3', '\x2', '\x2', '\x2', '\x36', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x140', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '<', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x14D', '\x3', '\x2', '\x2', '\x2', '@', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x46', '\x16E', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x174', '\x3', '\x2', '\x2', '\x2', 'J', '\x184', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x191', '\x3', '\x2', '\x2', '\x2', 'N', '\x199', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1A3', '\x3', '\x2', '\x2', '\x2', 'T', '\x1A5', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1C5', '\x3', '\x2', '\x2', '\x2', 'X', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x1E4', '\x3', '\x2', '\x2', '\x2', '^', '\x1FD', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x201', '\x3', '\x2', '\x2', '\x2', '\x62', '\x203', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x210', '\x3', '\x2', '\x2', '\x2', 'h', '\x220', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x222', '\x3', '\x2', '\x2', '\x2', 'l', '\x225', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x230', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x237', '\x3', '\x2', '\x2', '\x2', 'r', '\x240', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x242', '\x3', '\x2', '\x2', '\x2', 'v', '\x246', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x256', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x5', '\x4', '\x3', '\x2', '{', '|', '\x5', '\x14', '\v', '\x2', 
		'|', '}', '\x5', '\x12', '\n', '\x2', '}', '~', '\x5', '\x10', '\t', '\x2', 
		'~', '\x3', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\a', '\x31', 
		'\x2', '\x2', '\x80', '\x81', '\x5', '\x6', '\x4', '\x2', '\x81', '\x82', 
		'\a', '+', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x84', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x18', '\x2', '\x2', '\x87', 
		'\x88', '\x5', '\b', '\x5', '\x2', '\x88', '\x89', '\x5', '\x6', '\x4', 
		'\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\a', '\x32', '\x2', '\x2', '\x8E', '\x8F', '\x5', 
		'\n', '\x6', '\x2', '\x8F', '\t', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\a', '\x18', '\x2', '\x2', '\x91', '\x92', '\x5', '\f', '\a', 
		'\x2', '\x92', '\x93', '\x5', '\n', '\x6', '\x2', '\x93', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x96', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\v', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', 
		'\x33', '\x2', '\x2', '\x98', '\x99', '\a', '\x1C', '\x2', '\x2', '\x99', 
		'\x9A', '\x5', '\xE', '\b', '\x2', '\x9A', '\x9B', '\a', '\x1D', '\x2', 
		'\x2', '\x9B', '\r', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', 
		'-', '\x2', '\x2', '\x9D', '\x9E', '\a', '(', '\x2', '\x2', '\x9E', '\x9F', 
		'\x5', '\x42', '\"', '\x2', '\x9F', '\xA0', '\a', ',', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '.', '\x2', '\x2', '\xA1', '\xA2', '\a', '(', '\x2', '\x2', 
		'\xA2', '\xA3', '\x5', '\x42', '\"', '\x2', '\xA3', '\xA4', '\a', ',', 
		'\x2', '\x2', '\xA4', '\xA5', '\a', '/', '\x2', '\x2', '\xA5', '\xA6', 
		'\a', '(', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\x42', '\"', '\x2', '\xA7', 
		'\xA8', '\a', ',', '\x2', '\x2', '\xA8', '\xA9', '\a', '\x30', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '(', '\x2', '\x2', '\xAA', '\xAB', '\x5', 
		'\x42', '\"', '\x2', '\xAB', '\xF', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\x5', '\x1A', '\xE', '\x2', '\xAD', '\xAE', '\x5', '\x10', '\t', 
		'\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\x5', '`', '\x31', '\x2', '\xB3', '\xB4', '\x5', 
		'\x12', '\n', '\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\xF', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', ')', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\x16', '\f', 
		'\x2', '\xBB', '\xBC', '\a', '*', '\x2', '\x2', '\xBC', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\x18', '\r', '\x2', '\xBE', 
		'\xBF', '\x5', '\x16', '\f', '\x2', '\xBF', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x36', '\x2', 
		'\x2', '\xC4', '\xCE', '\a', '+', '\x2', '\x2', '\xC5', '\xC6', '\a', 
		'\x36', '\x2', '\x2', '\xC6', '\xC7', '\x5', 'X', '-', '\x2', '\xC7', 
		'\xC8', '\a', '+', '\x2', '\x2', '\xC8', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCA', '\a', '\x36', '\x2', '\x2', '\xCA', '\xCB', '\x5', 
		'X', '-', '\x2', '\xCB', '\xCC', '\a', '+', '\x2', '\x2', '\xCC', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\x19', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', 
		'\a', '\v', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x36', '\x2', '\x2', 
		'\xD1', '\xD2', '\a', ')', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x1C', 
		'\xF', '\x2', '\xD3', '\xD4', '\a', '*', '\x2', '\x2', '\xD4', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\x1E', '\x10', '\x2', 
		'\xD6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x5', ' ', 
		'\x11', '\x2', '\xD8', '\xD9', '\x5', '\x1E', '\x10', '\x2', '\xD9', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE1', 
		'\x5', '(', '\x15', '\x2', '\xDE', '\xE1', '\x5', '\x34', '\x1B', '\x2', 
		'\xDF', '\xE1', '\x5', 'L', '\'', '\x2', '\xE0', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '!', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE3', '\x5', '\x34', '\x1B', '\x2', '\xE3', '\xE4', '\x5', '\"', '\x12', 
		'\x2', '\xE4', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x5', '(', '\x15', '\x2', '\xE9', '\xEA', '\x5', 
		'$', '\x13', '\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xEF', '\x5', 'L', '\'', '\x2', '\xEF', 
		'\xF0', '\x5', '&', '\x14', '\x2', '\xF0', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x5', ',', '\x17', 
		'\x2', '\xF5', '\xF6', '\a', '+', '\x2', '\x2', '\xF6', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\x5', '.', '\x18', '\x2', '\xF8', 
		'\xF9', '\a', '+', '\x2', '\x2', '\xF9', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFB', '\x5', '*', '\x16', '\x2', '\xFB', '\xFC', '\a', 
		'+', '\x2', '\x2', '\xFC', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFE', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\r', '\x2', '\x2', '\x100', 
		'\x101', '\a', '\x36', '\x2', '\x2', '\x101', '\x102', '\a', '(', '\x2', 
		'\x2', '\x102', '\x103', '\x5', 'J', '&', '\x2', '\x103', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x105', '\a', '\xE', '\x2', '\x2', '\x105', 
		'\x106', '\a', '\x36', '\x2', '\x2', '\x106', '\x107', '\a', '(', '\x2', 
		'\x2', '\x107', '\x108', '\x5', '\x42', '\"', '\x2', '\x108', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\f', '\x2', '\x2', '\x10A', 
		'\x10B', '\a', '\x36', '\x2', '\x2', '\x10B', '\x10C', '\a', '(', '\x2', 
		'\x2', '\x10C', '\x112', '\x5', '\x30', '\x19', '\x2', '\x10D', '\x10E', 
		'\a', '\f', '\x2', '\x2', '\x10E', '\x10F', '\a', '\x36', '\x2', '\x2', 
		'\x10F', '\x110', '\a', '(', '\x2', '\x2', '\x110', '\x112', '\a', '\x36', 
		'\x2', '\x2', '\x111', '\x109', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x114', '\a', '\x1C', '\x2', '\x2', '\x114', '\x115', '\x5', 
		'\x32', '\x1A', '\x2', '\x115', '\x116', '\a', '\x1D', '\x2', '\x2', '\x116', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x117', '\x11C', '\x5', 't', ';', 
		'\x2', '\x118', '\x11C', '\x5', 'v', '<', '\x2', '\x119', '\x11C', '\a', 
		'\x36', '\x2', '\x2', '\x11A', '\x11C', '\x5', 'l', '\x37', '\x2', '\x11B', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x31', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\x5', 
		'\x42', '\"', '\x2', '\x11E', '\x11F', '\a', ',', '\x2', '\x2', '\x11F', 
		'\x120', '\x5', '\x42', '\"', '\x2', '\x120', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x124', '\x5', '\x38', '\x1D', '\x2', '\x122', '\x124', 
		'\x5', '\x36', '\x1C', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x126', '\x5', 'x', '=', '\x2', '\x126', 
		'\x127', '\a', '(', '\x2', '\x2', '\x127', '\x128', '\x5', '\x42', '\"', 
		'\x2', '\x128', '\x129', '\a', '+', '\x2', '\x2', '\x129', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\a', '\x36', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', '(', '\x2', '\x2', '\x12C', '\x12D', '\a', '\x36', '\x2', 
		'\x2', '\x12D', '\x141', '\a', '+', '\x2', '\x2', '\x12E', '\x12F', '\a', 
		'\x36', '\x2', '\x2', '\x12F', '\x130', '\a', '(', '\x2', '\x2', '\x130', 
		'\x131', '\x5', 'J', '&', '\x2', '\x131', '\x132', '\a', '+', '\x2', '\x2', 
		'\x132', '\x141', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\a', 
		'\x36', '\x2', '\x2', '\x134', '\x135', '\a', '(', '\x2', '\x2', '\x135', 
		'\x136', '\x5', '\x42', '\"', '\x2', '\x136', '\x137', '\a', '+', '\x2', 
		'\x2', '\x137', '\x141', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', 
		'\x5', ':', '\x1E', '\x2', '\x139', '\x13A', '\a', '+', '\x2', '\x2', 
		'\x13A', '\x141', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\a', 
		'\x36', '\x2', '\x2', '\x13C', '\x13D', '\a', '(', '\x2', '\x2', '\x13D', 
		'\x13E', '\x5', 'l', '\x37', '\x2', '\x13E', '\x13F', '\a', '+', '\x2', 
		'\x2', '\x13F', '\x141', '\x3', '\x2', '\x2', '\x2', '\x140', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x133', '\x3', '\x2', '\x2', '\x2', '\x140', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x142', '\x148', '\x5', '>', ' ', 
		'\x2', '\x143', '\x148', '\x5', '<', '\x1F', '\x2', '\x144', '\x145', 
		'\a', '\x36', '\x2', '\x2', '\x145', '\x146', '\a', '(', '\x2', '\x2', 
		'\x146', '\x148', '\x5', '\x30', '\x19', '\x2', '\x147', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x143', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x148', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14A', '\x5', 't', ';', '\x2', '\x14A', '\x14B', '\a', 
		'(', '\x2', '\x2', '\x14B', '\x14C', '\x5', '\x30', '\x19', '\x2', '\x14C', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x5', 'v', '<', '\x2', 
		'\x14E', '\x14F', '\a', '(', '\x2', '\x2', '\x14F', '\x150', '\x5', '\x30', 
		'\x19', '\x2', '\x150', '?', '\x3', '\x2', '\x2', '\x2', '\x151', '\x156', 
		'\a', '\x36', '\x2', '\x2', '\x152', '\x156', '\x5', 'l', '\x37', '\x2', 
		'\x153', '\x156', '\x5', '\x42', '\"', '\x2', '\x154', '\x156', '\x5', 
		'J', '&', '\x2', '\x155', '\x151', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x5', '\x44', '#', '\x2', 
		'\x158', '\x159', '\a', '\x1E', '\x2', '\x2', '\x159', '\x15A', '\x5', 
		'\x42', '\"', '\x2', '\x15A', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x15D', '\x5', '\x44', '#', '\x2', '\x15C', '\x157', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x5', '\x46', '$', '\x2', 
		'\x15F', '\x160', '\a', '!', '\x2', '\x2', '\x160', '\x161', '\x5', '\x44', 
		'#', '\x2', '\x161', '\x164', '\x3', '\x2', '\x2', '\x2', '\x162', '\x164', 
		'\x5', '\x46', '$', '\x2', '\x163', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x162', '\x3', '\x2', '\x2', '\x2', '\x164', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x166', '\x5', 'H', '%', '\x2', '\x166', 
		'\x167', '\a', '$', '\x2', '\x2', '\x167', '\x168', '\x5', '\x46', '$', 
		'\x2', '\x168', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16F', 
		'\x5', 'H', '%', '\x2', '\x16A', '\x16B', '\a', '\x1C', '\x2', '\x2', 
		'\x16B', '\x16C', '\x5', '\x42', '\"', '\x2', '\x16C', '\x16D', '\a', 
		'\x1D', '\x2', '\x2', '\x16D', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16F', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x175', '\x5', 'l', '\x37', '\x2', '\x171', 
		'\x175', '\a', '\a', '\x2', '\x2', '\x172', '\x175', '\x5', 'x', '=', 
		'\x2', '\x173', '\x175', '\a', '\x36', '\x2', '\x2', '\x174', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x172', '\x3', '\x2', '\x2', '\x2', '\x174', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x175', 'I', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x177', '\b', '&', '\x1', '\x2', '\x177', '\x185', '\a', '\x36', '\x2', 
		'\x2', '\x178', '\x185', '\a', '\b', '\x2', '\x2', '\x179', '\x185', '\x5', 
		'l', '\x37', '\x2', '\x17A', '\x17B', '\x5', '\x42', '\"', '\x2', '\x17B', 
		'\x17C', '\a', '&', '\x2', '\x2', '\x17C', '\x17D', '\x5', '\x42', '\"', 
		'\x2', '\x17D', '\x185', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', 
		'\a', '\'', '\x2', '\x2', '\x17F', '\x185', '\x5', 'J', '&', '\x4', '\x180', 
		'\x181', '\a', '\x1C', '\x2', '\x2', '\x181', '\x182', '\x5', 'J', '&', 
		'\x2', '\x182', '\x183', '\a', '\x1D', '\x2', '\x2', '\x183', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x178', '\x3', '\x2', '\x2', '\x2', '\x184', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x17E', '\x3', '\x2', '\x2', '\x2', '\x184', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', 
		'\f', '\x5', '\x2', '\x2', '\x187', '\x188', '\a', '%', '\x2', '\x2', 
		'\x188', '\x18A', '\x5', 'J', '&', '\x6', '\x189', '\x186', '\x3', '\x2', 
		'\x2', '\x2', '\x18A', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', 'K', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18B', '\x3', '\x2', 
		'\x2', '\x2', '\x18E', '\x192', '\x5', 'Z', '.', '\x2', '\x18F', '\x192', 
		'\x5', 'N', '(', '\x2', '\x190', '\x192', '\x5', '\x18', '\r', '\x2', 
		'\x191', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x191', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x190', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\x5', 'P', ')', '\x2', 
		'\x194', '\x195', '\a', '+', '\x2', '\x2', '\x195', '\x19A', '\x3', '\x2', 
		'\x2', '\x2', '\x196', '\x197', '\x5', 'T', '+', '\x2', '\x197', '\x198', 
		'\a', '+', '\x2', '\x2', '\x198', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x193', '\x3', '\x2', '\x2', '\x2', '\x199', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', 'O', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x19C', '\a', '\x12', '\x2', '\x2', '\x19C', '\x19D', '\x5', 'X', '-', 
		'\x2', '\x19D', '\x19E', '\x5', 'R', '*', '\x2', '\x19E', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x19F', '\x1A0', '\x5', 'V', ',', '\x2', '\x1A0', 
		'\x1A1', '\x5', 'R', '*', '\x2', '\x1A1', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x1A2', '\x1A4', '\x5', 'V', ',', '\x2', '\x1A3', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A4', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\a', '\x11', '\x2', 
		'\x2', '\x1A6', '\x1A7', '\a', '\x18', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\a', '\x10', '\x2', '\x2', '\x1A8', '\x1A9', '\a', '\x1C', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\x5', '\x42', '\"', '\x2', '\x1AA', '\x1AB', '\a', 
		'\x1D', '\x2', '\x2', '\x1AB', '\x1AC', '\x5', 'X', '-', '\x2', '\x1AC', 
		'\x1AD', '\x5', 'R', '*', '\x2', '\x1AD', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AF', '\a', '\x18', '\x2', '\x2', '\x1AF', '\x1B0', '\a', 
		'\x13', '\x2', '\x2', '\x1B0', '\x1B1', '\a', '\x1C', '\x2', '\x2', '\x1B1', 
		'\x1B2', '\a', '\x36', '\x2', '\x2', '\x1B2', '\x1C6', '\a', '\x1D', '\x2', 
		'\x2', '\x1B3', '\x1B4', '\a', '\x18', '\x2', '\x2', '\x1B4', '\x1B5', 
		'\a', '\x13', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '\x1C', '\x2', '\x2', 
		'\x1B6', '\x1B7', '\x5', '\x32', '\x1A', '\x2', '\x1B7', '\x1B8', '\a', 
		'\x1D', '\x2', '\x2', '\x1B8', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1BA', '\a', '\x18', '\x2', '\x2', '\x1BA', '\x1BB', '\a', '\x13', '\x2', 
		'\x2', '\x1BB', '\x1BC', '\a', '\x1C', '\x2', '\x2', '\x1BC', '\x1BD', 
		'\x5', 't', ';', '\x2', '\x1BD', '\x1BE', '\a', '\x1D', '\x2', '\x2', 
		'\x1BE', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\a', 
		'\x18', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\x13', '\x2', '\x2', '\x1C1', 
		'\x1C2', '\a', '\x1C', '\x2', '\x2', '\x1C2', '\x1C3', '\x5', 'v', '<', 
		'\x2', '\x1C3', '\x1C4', '\a', '\x1D', '\x2', '\x2', '\x1C4', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C5', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1B9', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\a', '\x18', '\x2', 
		'\x2', '\x1C8', '\x1C9', '\a', '\x14', '\x2', '\x2', '\x1C9', '\x1CA', 
		'\a', '\x1C', '\x2', '\x2', '\x1CA', '\x1CB', '\a', '\x36', '\x2', '\x2', 
		'\x1CB', '\x1DF', '\a', '\x1D', '\x2', '\x2', '\x1CC', '\x1CD', '\a', 
		'\x18', '\x2', '\x2', '\x1CD', '\x1CE', '\a', '\x14', '\x2', '\x2', '\x1CE', 
		'\x1CF', '\a', '\x1C', '\x2', '\x2', '\x1CF', '\x1D0', '\x5', '\x32', 
		'\x1A', '\x2', '\x1D0', '\x1D1', '\a', '\x1D', '\x2', '\x2', '\x1D1', 
		'\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\a', '\x18', '\x2', 
		'\x2', '\x1D3', '\x1D4', '\a', '\x14', '\x2', '\x2', '\x1D4', '\x1D5', 
		'\a', '\x1C', '\x2', '\x2', '\x1D5', '\x1D6', '\x5', 't', ';', '\x2', 
		'\x1D6', '\x1D7', '\a', '\x1D', '\x2', '\x2', '\x1D7', '\x1DF', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\a', '\x18', '\x2', '\x2', '\x1D9', 
		'\x1DA', '\a', '\x14', '\x2', '\x2', '\x1DA', '\x1DB', '\a', '\x1C', '\x2', 
		'\x2', '\x1DB', '\x1DC', '\x5', 'v', '<', '\x2', '\x1DC', '\x1DD', '\a', 
		'\x1D', '\x2', '\x2', '\x1DD', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1DE', 
		'\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1CC', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1D8', 
		'\x3', '\x2', '\x2', '\x2', '\x1DF', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\x1E3', '\x5', '\\', '/', '\x2', '\x1E1', '\x1E3', '\x5', '^', 
		'\x30', '\x2', '\x1E2', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x1E4', '\x1E5', '\a', '\x15', '\x2', '\x2', '\x1E5', '\x1E6', 
		'\a', '\x1C', '\x2', '\x2', '\x1E6', '\x1E7', '\x5', '\x42', '\"', '\x2', 
		'\x1E7', '\x1E8', '\a', '\x1D', '\x2', '\x2', '\x1E8', '\x1E9', '\x5', 
		'\x1C', '\xF', '\x2', '\x1E9', '\x1EA', '\a', '\x16', '\x2', '\x2', '\x1EA', 
		']', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\a', '\x15', '\x2', 
		'\x2', '\x1EC', '\x1ED', '\a', '\x18', '\x2', '\x2', '\x1ED', '\x1EE', 
		'\a', '\x17', '\x2', '\x2', '\x1EE', '\x1EF', '\a', '\x1C', '\x2', '\x2', 
		'\x1EF', '\x1F0', '\x5', 'l', '\x37', '\x2', '\x1F0', '\x1F1', '\a', '\x1D', 
		'\x2', '\x2', '\x1F1', '\x1F2', '\x5', '\x1C', '\xF', '\x2', '\x1F2', 
		'\x1F3', '\a', '\x16', '\x2', '\x2', '\x1F3', '\x1FE', '\x3', '\x2', '\x2', 
		'\x2', '\x1F4', '\x1F5', '\a', '\x15', '\x2', '\x2', '\x1F5', '\x1F6', 
		'\a', '\x18', '\x2', '\x2', '\x1F6', '\x1F7', '\a', '\x17', '\x2', '\x2', 
		'\x1F7', '\x1F8', '\a', '\x1C', '\x2', '\x2', '\x1F8', '\x1F9', '\x5', 
		'J', '&', '\x2', '\x1F9', '\x1FA', '\a', '\x1D', '\x2', '\x2', '\x1FA', 
		'\x1FB', '\x5', '\x1C', '\xF', '\x2', '\x1FB', '\x1FC', '\a', '\x16', 
		'\x2', '\x2', '\x1FC', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1EB', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '_', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x202', '\x5', '\x62', 
		'\x32', '\x2', '\x200', '\x202', '\x5', '\x66', '\x34', '\x2', '\x201', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', '\x200', '\x3', '\x2', '\x2', 
		'\x2', '\x202', '\x61', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', 
		'\a', '\x19', '\x2', '\x2', '\x204', '\x205', '\x5', '\x64', '\x33', '\x2', 
		'\x205', '\x206', '\a', '\x36', '\x2', '\x2', '\x206', '\x207', '\a', 
		'\x1C', '\x2', '\x2', '\x207', '\x208', '\x5', 'h', '\x35', '\x2', '\x208', 
		'\x209', '\a', '\x1D', '\x2', '\x2', '\x209', '\x20A', '\a', ')', '\x2', 
		'\x2', '\x20A', '\x20B', '\x5', '\x1C', '\xF', '\x2', '\x20B', '\x20C', 
		'\x5', 'r', ':', '\x2', '\x20C', '\x20D', '\a', '*', '\x2', '\x2', '\x20D', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\t', '\x2', '\x2', 
		'\x2', '\x20F', '\x65', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', 
		'\a', '\x19', '\x2', '\x2', '\x211', '\x212', '\a', '\x1B', '\x2', '\x2', 
		'\x212', '\x213', '\a', '\x36', '\x2', '\x2', '\x213', '\x214', '\a', 
		'\x1C', '\x2', '\x2', '\x214', '\x215', '\x5', 'h', '\x35', '\x2', '\x215', 
		'\x216', '\a', '\x1D', '\x2', '\x2', '\x216', '\x217', '\a', ')', '\x2', 
		'\x2', '\x217', '\x218', '\x5', '\x1C', '\xF', '\x2', '\x218', '\x219', 
		'\a', '*', '\x2', '\x2', '\x219', 'g', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'\x21B', '\x5', 'j', '\x36', '\x2', '\x21B', '\x21C', '\a', ',', '\x2', 
		'\x2', '\x21C', '\x21D', '\x5', 'h', '\x35', '\x2', '\x21D', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x21E', '\x221', '\x5', 'j', '\x36', '\x2', 
		'\x21F', '\x221', '\x3', '\x2', '\x2', '\x2', '\x220', '\x21A', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x221', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x222', '\x223', '\x5', '\x64', '\x33', '\x2', '\x223', '\x224', 
		'\a', '\x36', '\x2', '\x2', '\x224', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x225', '\x226', '\a', '\x36', '\x2', '\x2', '\x226', '\x227', '\a', 
		'\x1C', '\x2', '\x2', '\x227', '\x228', '\x5', 'n', '\x38', '\x2', '\x228', 
		'\x229', '\a', '\x1D', '\x2', '\x2', '\x229', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x22B', '\x5', 'p', '\x39', '\x2', '\x22B', '\x22C', 
		'\a', ',', '\x2', '\x2', '\x22C', '\x22D', '\x5', 'n', '\x38', '\x2', 
		'\x22D', '\x231', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x231', '\x5', 
		'p', '\x39', '\x2', '\x22F', '\x231', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x22A', '\x3', '\x2', '\x2', '\x2', '\x230', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x230', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x231', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x232', '\x238', '\a', '\x36', '\x2', '\x2', '\x233', 
		'\x238', '\x5', 'l', '\x37', '\x2', '\x234', '\x238', '\x5', '@', '!', 
		'\x2', '\x235', '\x238', '\x5', 'v', '<', '\x2', '\x236', '\x238', '\x5', 
		't', ';', '\x2', '\x237', '\x232', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x237', '\x234', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x235', '\x3', '\x2', '\x2', '\x2', '\x237', '\x236', 
		'\x3', '\x2', '\x2', '\x2', '\x238', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x239', '\x23A', '\a', '\x1A', '\x2', '\x2', '\x23A', '\x23B', '\a', 
		'\x36', '\x2', '\x2', '\x23B', '\x241', '\a', '+', '\x2', '\x2', '\x23C', 
		'\x23D', '\a', '\x1A', '\x2', '\x2', '\x23D', '\x23E', '\x5', '@', '!', 
		'\x2', '\x23E', '\x23F', '\a', '+', '\x2', '\x2', '\x23F', '\x241', '\x3', 
		'\x2', '\x2', '\x2', '\x240', '\x239', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x23C', '\x3', '\x2', '\x2', '\x2', '\x241', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x243', '\a', '\x36', '\x2', '\x2', '\x243', '\x244', 
		'\a', '\x18', '\x2', '\x2', '\x244', '\x245', '\a', '\x3', '\x2', '\x2', 
		'\x245', 'u', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\a', '\x36', 
		'\x2', '\x2', '\x247', '\x248', '\a', '\x18', '\x2', '\x2', '\x248', '\x249', 
		'\a', '\x4', '\x2', '\x2', '\x249', 'w', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x24B', '\a', '\x36', '\x2', '\x2', '\x24B', '\x257', '\a', '\x5', '\x2', 
		'\x2', '\x24C', '\x24D', '\a', '\x36', '\x2', '\x2', '\x24D', '\x257', 
		'\a', '\x6', '\x2', '\x2', '\x24E', '\x251', '\x5', 't', ';', '\x2', '\x24F', 
		'\x251', '\x5', 'v', '<', '\x2', '\x250', '\x24E', '\x3', '\x2', '\x2', 
		'\x2', '\x250', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x251', '\x254', 
		'\x3', '\x2', '\x2', '\x2', '\x252', '\x255', '\a', '\x5', '\x2', '\x2', 
		'\x253', '\x255', '\a', '\x6', '\x2', '\x2', '\x254', '\x252', '\x3', 
		'\x2', '\x2', '\x2', '\x254', '\x253', '\x3', '\x2', '\x2', '\x2', '\x255', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x256', '\x24A', '\x3', '\x2', '\x2', 
		'\x2', '\x256', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x256', '\x250', 
		'\x3', '\x2', '\x2', '\x2', '\x257', 'y', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x84', '\x8B', '\x95', '\xB0', '\xB6', '\xC1', '\xCD', '\xDB', '\xE0', 
		'\xE6', '\xEC', '\xF2', '\xFD', '\x111', '\x11B', '\x123', '\x140', '\x147', 
		'\x155', '\x15C', '\x163', '\x16E', '\x174', '\x184', '\x18B', '\x191', 
		'\x199', '\x1A3', '\x1C5', '\x1DE', '\x1E2', '\x1FD', '\x201', '\x220', 
		'\x230', '\x237', '\x240', '\x250', '\x254', '\x256',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
