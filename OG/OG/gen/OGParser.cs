//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Rasmus/OneDrive/Aalborg University/4 Semester/Project/P4-project/OG/OG\OG.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class OGParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, Number=2, BooleanValue=3, WS=4, COMMENT=5, ShapeDCLWord=6, PointDCLWord=7, 
		BoolDCLWord=8, NumberDCLWord=9, DrawDCLWord=10, WithAngle=11, Curve=12, 
		Line=13, To=14, From=15, RepeatStart=16, RepeatEnd=17, Until=18, DOT=19, 
		FunctionStartWord=20, FunctionReturnWord=21, Void=22, LParen=23, RParen=24, 
		Plus_Minus=25, Plus=26, Minus=27, Mul_Div=28, Times=29, Div=30, Pow=31, 
		LogicOperator=32, BoolOperator=33, NOT=34, Assign=35, OpenScope=36, CloseScope=37, 
		Terminator=38, Seperator=39, XMIN=40, XMAX=41, YMAX=42, YMIN=43, Machine=44, 
		WorkArea=45, Size=46, StartPointReference=47, EndPointReference=48, If=49, 
		Then=50, CoordinateXYValue=51, ID=52;
	public const int
		RULE_program = 0, RULE_machineVariables = 1, RULE_machine = 2, RULE_draw = 3, 
		RULE_shapeDefinition = 4, RULE_body = 5, RULE_declaration = 6, RULE_booleanDeclaration = 7, 
		RULE_numberDeclaration = 8, RULE_pointDeclaration = 9, RULE_pointReference = 10, 
		RULE_numberTuple = 11, RULE_assignment = 12, RULE_propertyAssignment = 13, 
		RULE_variableAssignment = 14, RULE_idAssign = 15, RULE_boolAssignment = 16, 
		RULE_numberAssignment = 17, RULE_pointAssignment = 18, RULE_startPointAssignment = 19, 
		RULE_endPointAssignment = 20, RULE_expression = 21, RULE_mathExpression = 22, 
		RULE_term = 23, RULE_factor = 24, RULE_atom = 25, RULE_boolExpression = 26, 
		RULE_command = 27, RULE_movementCommand = 28, RULE_lineCommand = 29, RULE_curveCommand = 30, 
		RULE_toCommand = 31, RULE_drawCommand = 32, RULE_iterationCommand = 33, 
		RULE_numberIteration = 34, RULE_untilIteration = 35, RULE_functionDeclaration = 36, 
		RULE_returnFunctionDCL = 37, RULE_typeWord = 38, RULE_voidFunctionDCL = 39, 
		RULE_parameterDeclarations = 40, RULE_parameters = 41, RULE_functionCall = 42, 
		RULE_parameterList = 43, RULE_returnStatement = 44;
	public static readonly string[] ruleNames = {
		"program", "machineVariables", "machine", "draw", "shapeDefinition", "body", 
		"declaration", "booleanDeclaration", "numberDeclaration", "pointDeclaration", 
		"pointReference", "numberTuple", "assignment", "propertyAssignment", "variableAssignment", 
		"idAssign", "boolAssignment", "numberAssignment", "pointAssignment", "startPointAssignment", 
		"endPointAssignment", "expression", "mathExpression", "term", "factor", 
		"atom", "boolExpression", "command", "movementCommand", "lineCommand", 
		"curveCommand", "toCommand", "drawCommand", "iterationCommand", "numberIteration", 
		"untilIteration", "functionDeclaration", "returnFunctionDCL", "typeWord", 
		"voidFunctionDCL", "parameterDeclarations", "parameters", "functionCall", 
		"parameterList", "returnStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.to'", null, null, null, null, "'shape'", "'point'", "'bool'", 
		"'number'", "'draw'", "'withAngle'", "'curve'", "'line'", "'to'", "'from'", 
		"'repeat'", "'repeat.end'", "'until'", "'.'", "'function'", "'return'", 
		"'void'", "'('", "')'", null, "'+'", "'-'", null, "'*'", "'/'", "'^'", 
		null, null, "'!'", "'='", "'{'", "'}'", "';'", "','", "'xmin'", "'xmax'", 
		"'ymin'", "'ymax'", "'Machine'", "'WorkArea'", "'size'", null, null, "'if'", 
		"'then'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "Number", "BooleanValue", "WS", "COMMENT", "ShapeDCLWord", 
		"PointDCLWord", "BoolDCLWord", "NumberDCLWord", "DrawDCLWord", "WithAngle", 
		"Curve", "Line", "To", "From", "RepeatStart", "RepeatEnd", "Until", "DOT", 
		"FunctionStartWord", "FunctionReturnWord", "Void", "LParen", "RParen", 
		"Plus_Minus", "Plus", "Minus", "Mul_Div", "Times", "Div", "Pow", "LogicOperator", 
		"BoolOperator", "NOT", "Assign", "OpenScope", "CloseScope", "Terminator", 
		"Seperator", "XMIN", "XMAX", "YMAX", "YMIN", "Machine", "WorkArea", "Size", 
		"StartPointReference", "EndPointReference", "If", "Then", "CoordinateXYValue", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OG.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OGParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OGParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OGParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MachineContext machine() {
			return GetRuleContext<MachineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawContext draw() {
			return GetRuleContext<DrawContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShapeDefinitionContext[] shapeDefinition() {
			return GetRuleContexts<ShapeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShapeDefinitionContext shapeDefinition(int i) {
			return GetRuleContext<ShapeDefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			machine();
			State = 91;
			draw();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FunctionStartWord) {
				{
				{
				State = 92;
				functionDeclaration();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ShapeDCLWord) {
				{
				{
				State = 98;
				shapeDefinition();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMIN() { return GetToken(OGParser.XMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Assign() { return GetTokens(OGParser.Assign); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign(int i) {
			return GetToken(OGParser.Assign, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Seperator() { return GetTokens(OGParser.Seperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator(int i) {
			return GetToken(OGParser.Seperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMAX() { return GetToken(OGParser.XMAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YMAX() { return GetToken(OGParser.YMAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YMIN() { return GetToken(OGParser.YMIN, 0); }
		public MachineVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machineVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMachineVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMachineVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachineVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineVariablesContext machineVariables() {
		MachineVariablesContext _localctx = new MachineVariablesContext(Context, State);
		EnterRule(_localctx, 2, RULE_machineVariables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(XMIN);
			State = 105;
			Match(Assign);
			State = 106;
			mathExpression();
			State = 107;
			Match(Seperator);
			State = 108;
			Match(XMAX);
			State = 109;
			Match(Assign);
			State = 110;
			mathExpression();
			State = 111;
			Match(Seperator);
			State = 112;
			Match(YMAX);
			State = 113;
			Match(Assign);
			State = 114;
			mathExpression();
			State = 115;
			Match(Seperator);
			State = 116;
			Match(YMIN);
			State = 117;
			Match(Assign);
			State = 118;
			mathExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Machine() { return GetToken(OGParser.Machine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(OGParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(OGParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WorkArea() { return GetToken(OGParser.WorkArea, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Size() { return GetToken(OGParser.Size, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MachineVariablesContext machineVariables() {
			return GetRuleContext<MachineVariablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		public MachineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineContext machine() {
		MachineContext _localctx = new MachineContext(Context, State);
		EnterRule(_localctx, 4, RULE_machine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(Machine);
			State = 121;
			Match(DOT);
			State = 122;
			Match(WorkArea);
			State = 123;
			Match(DOT);
			State = 124;
			Match(Size);
			State = 125;
			Match(LParen);
			State = 126;
			machineVariables();
			State = 127;
			Match(RParen);
			State = 128;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrawContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DrawDCLWord() { return GetToken(OGParser.DrawDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DrawCommandContext[] drawCommand() {
			return GetRuleContexts<DrawCommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawCommandContext drawCommand(int i) {
			return GetRuleContext<DrawCommandContext>(i);
		}
		public DrawContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_draw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDraw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDraw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDraw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrawContext draw() {
		DrawContext _localctx = new DrawContext(Context, State);
		EnterRule(_localctx, 6, RULE_draw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(DrawDCLWord);
			State = 131;
			Match(OpenScope);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 132;
				drawCommand();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShapeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShapeDCLWord() { return GetToken(OGParser.ShapeDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		public ShapeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shapeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterShapeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitShapeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShapeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShapeDefinitionContext shapeDefinition() {
		ShapeDefinitionContext _localctx = new ShapeDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_shapeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(ShapeDCLWord);
			State = 141;
			Match(ID);
			State = 142;
			Match(OpenScope);
			State = 143;
			body();
			State = 144;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_body);
		int _la;
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
			case BooleanValue:
			case PointDCLWord:
			case BoolDCLWord:
			case NumberDCLWord:
			case Curve:
			case Line:
			case RepeatStart:
			case LParen:
			case NOT:
			case StartPointReference:
			case EndPointReference:
			case CoordinateXYValue:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 150;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 146;
						expression();
						}
						break;
					case 2:
						{
						State = 147;
						declaration();
						}
						break;
					case 3:
						{
						State = 148;
						assignment();
						}
						break;
					case 4:
						{
						State = 149;
						command();
						}
						break;
					}
					}
					State = 152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << BooleanValue) | (1L << PointDCLWord) | (1L << BoolDCLWord) | (1L << NumberDCLWord) | (1L << Curve) | (1L << Line) | (1L << RepeatStart) | (1L << LParen) | (1L << NOT) | (1L << StartPointReference) | (1L << EndPointReference) | (1L << CoordinateXYValue) | (1L << ID))) != 0) );
				}
				break;
			case RepeatEnd:
			case FunctionReturnWord:
			case CloseScope:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberDeclarationContext numberDeclaration() {
			return GetRuleContext<NumberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointDeclarationContext pointDeclaration() {
			return GetRuleContext<PointDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanDeclarationContext booleanDeclaration() {
			return GetRuleContext<BooleanDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberDCLWord:
				{
				State = 157;
				numberDeclaration();
				}
				break;
			case PointDCLWord:
				{
				State = 158;
				pointDeclaration();
				}
				break;
			case BoolDCLWord:
				{
				State = 159;
				booleanDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 162;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolDCLWord() { return GetToken(OGParser.BoolDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public BooleanDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBooleanDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBooleanDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanDeclarationContext booleanDeclaration() {
		BooleanDeclarationContext _localctx = new BooleanDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_booleanDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(BoolDCLWord);
			State = 165;
			Match(ID);
			State = 166;
			Match(Assign);
			State = 167;
			boolExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDCLWord() { return GetToken(OGParser.NumberDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public NumberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberDeclarationContext numberDeclaration() {
		NumberDeclarationContext _localctx = new NumberDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_numberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(NumberDCLWord);
			State = 170;
			Match(ID);
			State = 171;
			Match(Assign);
			State = 172;
			mathExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointDCLWord() { return GetToken(OGParser.PointDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointReferenceContext pointReference() {
			return GetRuleContext<PointReferenceContext>(0);
		}
		public PointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointDeclarationContext pointDeclaration() {
		PointDeclarationContext _localctx = new PointDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_pointDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(PointDCLWord);
			State = 175;
			Match(ID);
			State = 176;
			Match(Assign);
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 177;
				pointReference();
				}
				break;
			case 2:
				{
				State = 178;
				Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StartPointReference() { return GetToken(OGParser.StartPointReference, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndPointReference() { return GetToken(OGParser.EndPointReference, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public PointReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointReferenceContext pointReference() {
		PointReferenceContext _localctx = new PointReferenceContext(Context, State);
		EnterRule(_localctx, 20, RULE_pointReference);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				Match(LParen);
				State = 182;
				numberTuple();
				State = 183;
				Match(RParen);
				}
				break;
			case StartPointReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(StartPointReference);
				}
				break;
			case EndPointReference:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				Match(EndPointReference);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 187;
				functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator() { return GetToken(OGParser.Seperator, 0); }
		public NumberTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberTupleContext numberTuple() {
		NumberTupleContext _localctx = new NumberTupleContext(Context, State);
		EnterRule(_localctx, 22, RULE_numberTuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			mathExpression();
			State = 191;
			Match(Seperator);
			State = 192;
			mathExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment() {
			return GetRuleContext<PropertyAssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StartPointReference:
			case EndPointReference:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				variableAssignment();
				}
				break;
			case CoordinateXYValue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				propertyAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CoordinateXYValue() { return GetToken(OGParser.CoordinateXYValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPropertyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPropertyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_propertyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(CoordinateXYValue);
			State = 199;
			Match(Assign);
			State = 200;
			mathExpression();
			State = 201;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdAssignContext idAssign() {
			return GetRuleContext<IdAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolAssignmentContext boolAssignment() {
			return GetRuleContext<BoolAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberAssignmentContext numberAssignment() {
			return GetRuleContext<NumberAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointAssignmentContext pointAssignment() {
			return GetRuleContext<PointAssignmentContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 203;
				idAssign();
				}
				break;
			case 2:
				{
				State = 204;
				boolAssignment();
				}
				break;
			case 3:
				{
				State = 205;
				numberAssignment();
				}
				break;
			case 4:
				{
				State = 206;
				pointAssignment();
				}
				break;
			}
			State = 209;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		public IdAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterIdAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitIdAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdAssignContext idAssign() {
		IdAssignContext _localctx = new IdAssignContext(Context, State);
		EnterRule(_localctx, 30, RULE_idAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(ID);
			State = 212;
			Match(Assign);
			State = 213;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public BoolAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolAssignmentContext boolAssignment() {
		BoolAssignmentContext _localctx = new BoolAssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_boolAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(ID);
			State = 216;
			Match(Assign);
			State = 217;
			boolExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public NumberAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberAssignmentContext numberAssignment() {
		NumberAssignmentContext _localctx = new NumberAssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_numberAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(ID);
			State = 220;
			Match(Assign);
			State = 221;
			mathExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndPointAssignmentContext endPointAssignment() {
			return GetRuleContext<EndPointAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartPointAssignmentContext startPointAssignment() {
			return GetRuleContext<StartPointAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointReferenceContext pointReference() {
			return GetRuleContext<PointReferenceContext>(0);
		}
		public PointAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointAssignmentContext pointAssignment() {
		PointAssignmentContext _localctx = new PointAssignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_pointAssignment);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EndPointReference:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				endPointAssignment();
				}
				break;
			case StartPointReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				startPointAssignment();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 225;
					Match(ID);
					State = 226;
					Match(Assign);
					State = 227;
					pointReference();
					}
					break;
				case 2:
					{
					State = 228;
					Match(ID);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPointAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StartPointReference() { return GetToken(OGParser.StartPointReference, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointReferenceContext pointReference() {
			return GetRuleContext<PointReferenceContext>(0);
		}
		public StartPointAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPointAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterStartPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitStartPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPointAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPointAssignmentContext startPointAssignment() {
		StartPointAssignmentContext _localctx = new StartPointAssignmentContext(Context, State);
		EnterRule(_localctx, 38, RULE_startPointAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(StartPointReference);
			State = 234;
			Match(Assign);
			State = 235;
			pointReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndPointAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndPointReference() { return GetToken(OGParser.EndPointReference, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(OGParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointReferenceContext pointReference() {
			return GetRuleContext<PointReferenceContext>(0);
		}
		public EndPointAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endPointAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterEndPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitEndPointAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndPointAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndPointAssignmentContext endPointAssignment() {
		EndPointAssignmentContext _localctx = new EndPointAssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_endPointAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(EndPointReference);
			State = 238;
			Match(Assign);
			State = 239;
			pointReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 241;
				Match(ID);
				}
				break;
			case 2:
				{
				State = 242;
				mathExpression();
				}
				break;
			case 3:
				{
				State = 243;
				boolExpression(0);
				}
				break;
			case 4:
				{
				State = 244;
				functionCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus_Minus() { return GetTokens(OGParser.Plus_Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_Minus(int i) {
			return GetToken(OGParser.Plus_Minus, i);
		}
		public MathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathExpressionContext mathExpression() {
		MathExpressionContext _localctx = new MathExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_mathExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			term();
			State = 252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 248;
					Match(Plus_Minus);
					}
					State = 249;
					term();
					}
					} 
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mul_Div() { return GetTokens(OGParser.Mul_Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul_Div(int i) {
			return GetToken(OGParser.Mul_Div, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 46, RULE_term);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			factor();
			State = 260;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 256;
					Match(Mul_Div);
					}
					State = 257;
					factor();
					}
					} 
				}
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pow() { return GetTokens(OGParser.Pow); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pow(int i) {
			return GetToken(OGParser.Pow, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 48, RULE_factor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			atom();
			State = 268;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 264;
					Match(Pow);
					State = 265;
					atom();
					}
					} 
				}
				State = 270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(OGParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CoordinateXYValue() { return GetToken(OGParser.CoordinateXYValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 50, RULE_atom);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				Match(Number);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 273;
				Match(CoordinateXYValue);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 274;
				Match(ID);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 275;
				Match(LParen);
				State = 276;
				mathExpression();
				State = 277;
				Match(RParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanValue() { return GetToken(OGParser.BooleanValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolOperator() { return GetToken(OGParser.BoolOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(OGParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext[] boolExpression() {
			return GetRuleContexts<BoolExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression(int i) {
			return GetRuleContext<BoolExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicOperator() { return GetToken(OGParser.LogicOperator, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		return boolExpression(0);
	}

	private BoolExpressionContext boolExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, _parentState);
		BoolExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_boolExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 282;
				Match(ID);
				}
				break;
			case 2:
				{
				State = 283;
				Match(BooleanValue);
				}
				break;
			case 3:
				{
				State = 284;
				functionCall();
				}
				break;
			case 4:
				{
				State = 285;
				mathExpression();
				State = 286;
				Match(BoolOperator);
				State = 287;
				mathExpression();
				}
				break;
			case 5:
				{
				State = 289;
				Match(NOT);
				State = 290;
				boolExpression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 298;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolExpression);
					State = 293;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 294;
					Match(LogicOperator);
					State = 295;
					boolExpression(3);
					}
					} 
				}
				State = 300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IterationCommandContext iterationCommand() {
			return GetRuleContext<IterationCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MovementCommandContext movementCommand() {
			return GetRuleContext<MovementCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawCommandContext drawCommand() {
			return GetRuleContext<DrawCommandContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 54, RULE_command);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RepeatStart:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301;
				iterationCommand();
				}
				break;
			case Curve:
			case Line:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				movementCommand();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 303;
				drawCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MovementCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineCommandContext lineCommand() {
			return GetRuleContext<LineCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveCommandContext curveCommand() {
			return GetRuleContext<CurveCommandContext>(0);
		}
		public MovementCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_movementCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterMovementCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitMovementCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMovementCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MovementCommandContext movementCommand() {
		MovementCommandContext _localctx = new MovementCommandContext(Context, State);
		EnterRule(_localctx, 56, RULE_movementCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Line:
				{
				State = 306;
				lineCommand();
				}
				break;
			case Curve:
				{
				State = 307;
				curveCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 310;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Line() { return GetToken(OGParser.Line, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(OGParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointReferenceContext pointReference() {
			return GetRuleContext<PointReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandContext[] toCommand() {
			return GetRuleContexts<ToCommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandContext toCommand(int i) {
			return GetRuleContext<ToCommandContext>(i);
		}
		public LineCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterLineCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitLineCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineCommandContext lineCommand() {
		LineCommandContext _localctx = new LineCommandContext(Context, State);
		EnterRule(_localctx, 58, RULE_lineCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(Line);
			State = 313;
			Match(DOT);
			State = 314;
			Match(From);
			State = 315;
			Match(LParen);
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 316;
				numberTuple();
				}
				break;
			case 2:
				{
				State = 317;
				Match(ID);
				}
				break;
			case 3:
				{
				State = 318;
				pointReference();
				}
				break;
			}
			State = 321;
			Match(RParen);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 322;
				toCommand();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurveCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Curve() { return GetToken(OGParser.Curve, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(OGParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(OGParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WithAngle() { return GetToken(OGParser.WithAngle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LParen() { return GetTokens(OGParser.LParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen(int i) {
			return GetToken(OGParser.LParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RParen() { return GetTokens(OGParser.RParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen(int i) {
			return GetToken(OGParser.RParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(OGParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandContext toCommand() {
			return GetRuleContext<ToCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public CurveCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_curveCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterCurveCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitCurveCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurveCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurveCommandContext curveCommand() {
		CurveCommandContext _localctx = new CurveCommandContext(Context, State);
		EnterRule(_localctx, 60, RULE_curveCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(Curve);
			State = 328;
			Match(DOT);
			State = 329;
			Match(WithAngle);
			State = 330;
			Match(LParen);
			State = 331;
			mathExpression();
			State = 332;
			Match(RParen);
			State = 333;
			Match(DOT);
			State = 334;
			Match(From);
			State = 335;
			Match(LParen);
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 336;
				numberTuple();
				}
				break;
			case 2:
				{
				State = 337;
				Match(ID);
				}
				break;
			}
			State = 340;
			Match(RParen);
			State = 341;
			toCommand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTupleContext numberTuple() {
			return GetRuleContext<NumberTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		public ToCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterToCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitToCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToCommandContext toCommand() {
		ToCommandContext _localctx = new ToCommandContext(Context, State);
		EnterRule(_localctx, 62, RULE_toCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			Match(T__0);
			State = 344;
			Match(LParen);
			State = 347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 345;
				numberTuple();
				}
				break;
			case 2:
				{
				State = 346;
				Match(ID);
				}
				break;
			}
			State = 349;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrawCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		public DrawCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drawCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterDrawCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitDrawCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrawCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrawCommandContext drawCommand() {
		DrawCommandContext _localctx = new DrawCommandContext(Context, State);
		EnterRule(_localctx, 64, RULE_drawCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(ID);
			State = 352;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberIterationContext numberIteration() {
			return GetRuleContext<NumberIterationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilIterationContext untilIteration() {
			return GetRuleContext<UntilIterationContext>(0);
		}
		public IterationCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterIterationCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitIterationCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationCommandContext iterationCommand() {
		IterationCommandContext _localctx = new IterationCommandContext(Context, State);
		EnterRule(_localctx, 66, RULE_iterationCommand);
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354;
				numberIteration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355;
				untilIteration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberIterationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatStart() { return GetToken(OGParser.RepeatStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatEnd() { return GetToken(OGParser.RepeatEnd, 0); }
		public NumberIterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberIteration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterNumberIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitNumberIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberIteration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberIterationContext numberIteration() {
		NumberIterationContext _localctx = new NumberIterationContext(Context, State);
		EnterRule(_localctx, 68, RULE_numberIteration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(RepeatStart);
			State = 359;
			Match(LParen);
			State = 360;
			mathExpression();
			State = 361;
			Match(RParen);
			State = 362;
			body();
			State = 363;
			Match(RepeatEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilIterationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatStart() { return GetToken(OGParser.RepeatStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(OGParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(OGParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RepeatEnd() { return GetToken(OGParser.RepeatEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public UntilIterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilIteration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterUntilIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitUntilIteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilIteration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilIterationContext untilIteration() {
		UntilIterationContext _localctx = new UntilIterationContext(Context, State);
		EnterRule(_localctx, 70, RULE_untilIteration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			Match(RepeatStart);
			State = 366;
			Match(DOT);
			State = 367;
			Match(Until);
			State = 368;
			Match(LParen);
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 369;
				boolExpression(0);
				}
				break;
			case 2:
				{
				State = 370;
				functionCall();
				}
				break;
			}
			State = 373;
			Match(RParen);
			State = 374;
			body();
			State = 375;
			Match(RepeatEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnFunctionDCLContext returnFunctionDCL() {
			return GetRuleContext<ReturnFunctionDCLContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VoidFunctionDCLContext voidFunctionDCL() {
			return GetRuleContext<VoidFunctionDCLContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_functionDeclaration);
		try {
			State = 379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 377;
				returnFunctionDCL();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378;
				voidFunctionDCL();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnFunctionDCLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionStartWord() { return GetToken(OGParser.FunctionStartWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeWordContext typeWord() {
			return GetRuleContext<TypeWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationsContext parameterDeclarations() {
			return GetRuleContext<ParameterDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		public ReturnFunctionDCLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnFunctionDCL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterReturnFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitReturnFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnFunctionDCL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnFunctionDCLContext returnFunctionDCL() {
		ReturnFunctionDCLContext _localctx = new ReturnFunctionDCLContext(Context, State);
		EnterRule(_localctx, 74, RULE_returnFunctionDCL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			Match(FunctionStartWord);
			State = 382;
			typeWord();
			State = 383;
			Match(ID);
			State = 384;
			parameterDeclarations();
			State = 385;
			Match(OpenScope);
			State = 386;
			body();
			State = 387;
			returnStatement();
			State = 388;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointDCLWord() { return GetToken(OGParser.PointDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolDCLWord() { return GetToken(OGParser.BoolDCLWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDCLWord() { return GetToken(OGParser.NumberDCLWord, 0); }
		public TypeWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterTypeWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitTypeWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeWordContext typeWord() {
		TypeWordContext _localctx = new TypeWordContext(Context, State);
		EnterRule(_localctx, 76, RULE_typeWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PointDCLWord) | (1L << BoolDCLWord) | (1L << NumberDCLWord))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidFunctionDCLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionStartWord() { return GetToken(OGParser.FunctionStartWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(OGParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationsContext parameterDeclarations() {
			return GetRuleContext<ParameterDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenScope() { return GetToken(OGParser.OpenScope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseScope() { return GetToken(OGParser.CloseScope, 0); }
		public VoidFunctionDCLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidFunctionDCL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterVoidFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitVoidFunctionDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidFunctionDCL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidFunctionDCLContext voidFunctionDCL() {
		VoidFunctionDCLContext _localctx = new VoidFunctionDCLContext(Context, State);
		EnterRule(_localctx, 78, RULE_voidFunctionDCL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(FunctionStartWord);
			State = 393;
			Match(Void);
			State = 394;
			Match(ID);
			State = 395;
			parameterDeclarations();
			State = 396;
			Match(OpenScope);
			State = 397;
			body();
			State = 398;
			Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		public ParameterDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterParameterDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitParameterDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationsContext parameterDeclarations() {
		ParameterDeclarationsContext _localctx = new ParameterDeclarationsContext(Context, State);
		EnterRule(_localctx, 80, RULE_parameterDeclarations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(LParen);
			State = 401;
			parameters();
			State = 402;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeWordContext[] typeWord() {
			return GetRuleContexts<TypeWordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeWordContext typeWord(int i) {
			return GetRuleContext<TypeWordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Seperator() { return GetTokens(OGParser.Seperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator(int i) {
			return GetToken(OGParser.Seperator, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 82, RULE_parameters);
		try {
			int _alt;
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PointDCLWord:
			case BoolDCLWord:
			case NumberDCLWord:
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 404;
						typeWord();
						State = 405;
						Match(ID);
						State = 406;
						Match(Seperator);
						}
						} 
					}
					State = 412;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				State = 413;
				typeWord();
				State = 414;
				Match(ID);
				}
				break;
			case RParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(OGParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(OGParser.RParen, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 84, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(ID);
			State = 420;
			Match(LParen);
			State = 421;
			parameterList();
			State = 422;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(OGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(OGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CoordinateXYValue() { return GetTokens(OGParser.CoordinateXYValue); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CoordinateXYValue(int i) {
			return GetToken(OGParser.CoordinateXYValue, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Seperator() { return GetTokens(OGParser.Seperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seperator(int i) {
			return GetToken(OGParser.Seperator, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 86, RULE_parameterList);
		try {
			int _alt;
			State = 441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
			case BooleanValue:
			case LParen:
			case NOT:
			case CoordinateXYValue:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 427;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
						case 1:
							{
							State = 424;
							Match(ID);
							}
							break;
						case 2:
							{
							State = 425;
							expression();
							}
							break;
						case 3:
							{
							State = 426;
							Match(CoordinateXYValue);
							}
							break;
						}
						State = 429;
						Match(Seperator);
						}
						} 
					}
					State = 434;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				}
				State = 438;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 435;
					Match(ID);
					}
					break;
				case 2:
					{
					State = 436;
					expression();
					}
					break;
				case 3:
					{
					State = 437;
					Match(CoordinateXYValue);
					}
					break;
				}
				}
				break;
			case RParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionReturnWord() { return GetToken(OGParser.FunctionReturnWord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Terminator() { return GetToken(OGParser.Terminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOGListener typedListener = listener as IOGListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOGVisitor<TResult> typedVisitor = visitor as IOGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(FunctionReturnWord);
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 444;
				Match(ID);
				}
				break;
			case 2:
				{
				State = 445;
				expression();
				}
				break;
			}
			State = 448;
			Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return boolExpression_sempred((BoolExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolExpression_sempred(BoolExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x1C5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '`', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x63', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x66', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', 'i', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x88', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '\x8B', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', 
		'\x99', '\n', '\a', '\r', '\a', '\xE', '\a', '\x9A', '\x3', '\a', '\x5', 
		'\a', '\x9E', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\xA3', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB6', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\xBF', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xC7', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xD2', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xE8', '\n', '\x14', '\x5', 
		'\x14', '\xEA', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\xF8', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', 
		'\x18', '\xFD', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x100', '\v', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x105', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x108', '\v', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x10D', '\n', '\x1A', 
		'\f', '\x1A', '\xE', '\x1A', '\x110', '\v', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x11A', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x126', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\x12B', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x12E', '\v', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x133', 
		'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x137', '\n', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x142', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x6', '\x1F', 
		'\x146', '\n', '\x1F', '\r', '\x1F', '\xE', '\x1F', '\x147', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x155', '\n', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x15E', '\n', '!', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x167', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x176', '\n', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x5', 
		'&', '\x17E', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\a', '+', '\x19B', '\n', '+', '\f', '+', '\xE', '+', '\x19E', '\v', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x1A4', '\n', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x5', '-', '\x1AE', '\n', '-', '\x3', '-', 
		'\a', '-', '\x1B1', '\n', '-', '\f', '-', '\xE', '-', '\x1B4', '\v', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x1B9', '\n', '-', '\x3', 
		'-', '\x5', '-', '\x1BC', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x5', '.', '\x1C1', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x2', 
		'\x3', '\x36', '/', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\x2', '\x3', '\x3', '\x2', '\t', '\v', '\x2', '\x1CF', 
		'\x2', '\\', '\x3', '\x2', '\x2', '\x2', '\x4', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'z', '\x3', '\x2', '\x2', '\x2', '\b', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x8E', '\x3', '\x2', '\x2', '\x2', '\f', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x12', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x16', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xD1', '\x3', '\x2', '\x2', '\x2', ' ', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xDD', '\x3', '\x2', '\x2', '\x2', '&', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xEB', '\x3', '\x2', '\x2', '\x2', '*', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xF7', '\x3', '\x2', '\x2', '\x2', '.', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x101', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x34', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x125', '\x3', '\x2', '\x2', '\x2', '\x38', '\x132', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x136', '\x3', '\x2', '\x2', '\x2', '<', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x159', '\x3', '\x2', '\x2', '\x2', '\x42', '\x161', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x166', '\x3', '\x2', '\x2', '\x2', '\x46', '\x168', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x17D', '\x3', '\x2', '\x2', '\x2', 'L', '\x17F', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x188', '\x3', '\x2', '\x2', '\x2', 'P', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x1A3', '\x3', '\x2', '\x2', '\x2', 'V', '\x1A5', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x1BB', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\x5', '\x6', '\x4', '\x2', ']', 
		'\x61', '\x5', '\b', '\x5', '\x2', '^', '`', '\x5', 'J', '&', '\x2', '_', 
		'^', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x62', 'g', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x5', '\n', '\x6', '\x2', 
		'\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\x3', '\x3', '\x2', '\x2', '\x2', 'i', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '*', '\x2', '\x2', 'k', 'l', 
		'\a', '%', '\x2', '\x2', 'l', 'm', '\x5', '.', '\x18', '\x2', 'm', 'n', 
		'\a', ')', '\x2', '\x2', 'n', 'o', '\a', '+', '\x2', '\x2', 'o', 'p', 
		'\a', '%', '\x2', '\x2', 'p', 'q', '\x5', '.', '\x18', '\x2', 'q', 'r', 
		'\a', ')', '\x2', '\x2', 'r', 's', '\a', ',', '\x2', '\x2', 's', 't', 
		'\a', '%', '\x2', '\x2', 't', 'u', '\x5', '.', '\x18', '\x2', 'u', 'v', 
		'\a', ')', '\x2', '\x2', 'v', 'w', '\a', '-', '\x2', '\x2', 'w', 'x', 
		'\a', '%', '\x2', '\x2', 'x', 'y', '\x5', '.', '\x18', '\x2', 'y', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '.', '\x2', '\x2', '{', '|', 
		'\a', '\x15', '\x2', '\x2', '|', '}', '\a', '/', '\x2', '\x2', '}', '~', 
		'\a', '\x15', '\x2', '\x2', '~', '\x7F', '\a', '\x30', '\x2', '\x2', '\x7F', 
		'\x80', '\a', '\x19', '\x2', '\x2', '\x80', '\x81', '\x5', '\x4', '\x3', 
		'\x2', '\x81', '\x82', '\a', '\x1A', '\x2', '\x2', '\x82', '\x83', '\a', 
		'(', '\x2', '\x2', '\x83', '\a', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\a', '\f', '\x2', '\x2', '\x85', '\x89', '\a', '&', '\x2', '\x2', '\x86', 
		'\x88', '\x5', '\x42', '\"', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', '\'', '\x2', '\x2', '\x8D', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\b', '\x2', '\x2', '\x8F', 
		'\x90', '\a', '\x36', '\x2', '\x2', '\x90', '\x91', '\a', '&', '\x2', 
		'\x2', '\x91', '\x92', '\x5', '\f', '\a', '\x2', '\x92', '\x93', '\a', 
		'\'', '\x2', '\x2', '\x93', '\v', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x99', '\x5', ',', '\x17', '\x2', '\x95', '\x99', '\x5', '\xE', '\b', 
		'\x2', '\x96', '\x99', '\x5', '\x1A', '\xE', '\x2', '\x97', '\x99', '\x5', 
		'\x38', '\x1D', '\x2', '\x98', '\x94', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA3', '\x5', '\x12', '\n', 
		'\x2', '\xA0', '\xA3', '\x5', '\x14', '\v', '\x2', '\xA1', '\xA3', '\x5', 
		'\x10', '\t', '\x2', '\xA2', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', 
		'(', '\x2', '\x2', '\xA5', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA7', '\a', '\n', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x36', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '%', '\x2', '\x2', '\xA9', '\xAA', '\x5', 
		'\x36', '\x1C', '\x2', '\xAA', '\x11', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\a', '\v', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x36', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', '%', '\x2', '\x2', '\xAE', '\xAF', '\x5', 
		'.', '\x18', '\x2', '\xAF', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '\t', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x36', '\x2', 
		'\x2', '\xB2', '\xB5', '\a', '%', '\x2', '\x2', '\xB3', '\xB6', '\x5', 
		'\x16', '\f', '\x2', '\xB4', '\xB6', '\a', '\x36', '\x2', '\x2', '\xB5', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'\x19', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\x18', '\r', '\x2', '\xB9', 
		'\xBA', '\a', '\x1A', '\x2', '\x2', '\xBA', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBF', '\a', '\x31', '\x2', '\x2', '\xBC', '\xBF', '\a', 
		'\x32', '\x2', '\x2', '\xBD', '\xBF', '\x5', 'V', ',', '\x2', '\xBE', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\x5', '.', '\x18', '\x2', '\xC1', '\xC2', '\a', ')', '\x2', '\x2', 
		'\xC2', '\xC3', '\x5', '.', '\x18', '\x2', '\xC3', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC7', '\x5', '\x1E', '\x10', '\x2', '\xC5', '\xC7', 
		'\x5', '\x1C', '\xF', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC9', '\a', '\x35', '\x2', '\x2', '\xC9', '\xCA', 
		'\a', '%', '\x2', '\x2', '\xCA', '\xCB', '\x5', '.', '\x18', '\x2', '\xCB', 
		'\xCC', '\a', '(', '\x2', '\x2', '\xCC', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xD2', '\x5', ' ', '\x11', '\x2', '\xCE', '\xD2', '\x5', 
		'\"', '\x12', '\x2', '\xCF', '\xD2', '\x5', '$', '\x13', '\x2', '\xD0', 
		'\xD2', '\x5', '&', '\x14', '\x2', '\xD1', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '(', '\x2', 
		'\x2', '\xD4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', 
		'\x36', '\x2', '\x2', '\xD6', '\xD7', '\a', '%', '\x2', '\x2', '\xD7', 
		'\xD8', '\a', '\x36', '\x2', '\x2', '\xD8', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\x36', '\x2', '\x2', '\xDA', '\xDB', '\a', 
		'%', '\x2', '\x2', '\xDB', '\xDC', '\x5', '\x36', '\x1C', '\x2', '\xDC', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x36', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '%', '\x2', '\x2', '\xDF', '\xE0', '\x5', 
		'.', '\x18', '\x2', '\xE0', '%', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xEA', 
		'\x5', '*', '\x16', '\x2', '\xE2', '\xEA', '\x5', '(', '\x15', '\x2', 
		'\xE3', '\xE4', '\a', '\x36', '\x2', '\x2', '\xE4', '\xE5', '\a', '%', 
		'\x2', '\x2', '\xE5', '\xE8', '\x5', '\x16', '\f', '\x2', '\xE6', '\xE8', 
		'\a', '\x36', '\x2', '\x2', '\xE7', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\'', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', '\x31', 
		'\x2', '\x2', '\xEC', '\xED', '\a', '%', '\x2', '\x2', '\xED', '\xEE', 
		'\x5', '\x16', '\f', '\x2', '\xEE', ')', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\a', '\x32', '\x2', '\x2', '\xF0', '\xF1', '\a', '%', '\x2', 
		'\x2', '\xF1', '\xF2', '\x5', '\x16', '\f', '\x2', '\xF2', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF8', '\a', '\x36', '\x2', '\x2', '\xF4', 
		'\xF8', '\x5', '.', '\x18', '\x2', '\xF5', '\xF8', '\x5', '\x36', '\x1C', 
		'\x2', '\xF6', '\xF8', '\x5', 'V', ',', '\x2', '\xF7', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '-', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFE', '\x5', 
		'\x30', '\x19', '\x2', '\xFA', '\xFB', '\a', '\x1B', '\x2', '\x2', '\xFB', 
		'\xFD', '\x5', '\x30', '\x19', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\x106', '\x5', '\x32', '\x1A', '\x2', '\x102', '\x103', 
		'\a', '\x1E', '\x2', '\x2', '\x103', '\x105', '\x5', '\x32', '\x1A', '\x2', 
		'\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x105', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x106', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10E', 
		'\x5', '\x34', '\x1B', '\x2', '\x10A', '\x10B', '\a', '!', '\x2', '\x2', 
		'\x10B', '\x10D', '\x5', '\x34', '\x1B', '\x2', '\x10C', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x33', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x11A', '\x5', 'V', ',', '\x2', 
		'\x112', '\x11A', '\a', '\x4', '\x2', '\x2', '\x113', '\x11A', '\a', '\x35', 
		'\x2', '\x2', '\x114', '\x11A', '\a', '\x36', '\x2', '\x2', '\x115', '\x116', 
		'\a', '\x19', '\x2', '\x2', '\x116', '\x117', '\x5', '.', '\x18', '\x2', 
		'\x117', '\x118', '\a', '\x1A', '\x2', '\x2', '\x118', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x111', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x112', '\x3', '\x2', '\x2', '\x2', '\x119', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x114', '\x3', '\x2', '\x2', '\x2', '\x119', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\b', '\x1C', '\x1', '\x2', '\x11C', '\x126', '\a', 
		'\x36', '\x2', '\x2', '\x11D', '\x126', '\a', '\x5', '\x2', '\x2', '\x11E', 
		'\x126', '\x5', 'V', ',', '\x2', '\x11F', '\x120', '\x5', '.', '\x18', 
		'\x2', '\x120', '\x121', '\a', '#', '\x2', '\x2', '\x121', '\x122', '\x5', 
		'.', '\x18', '\x2', '\x122', '\x126', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x124', '\a', '$', '\x2', '\x2', '\x124', '\x126', '\x5', '\x36', '\x1C', 
		'\x3', '\x125', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x125', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x128', '\f', '\x4', '\x2', '\x2', '\x128', '\x129', '\a', '\"', '\x2', 
		'\x2', '\x129', '\x12B', '\x5', '\x36', '\x1C', '\x5', '\x12A', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x37', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x133', '\x5', '\x44', 
		'#', '\x2', '\x130', '\x133', '\x5', ':', '\x1E', '\x2', '\x131', '\x133', 
		'\x5', '\x42', '\"', '\x2', '\x132', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x132', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x39', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x137', '\x5', '<', '\x1F', '\x2', '\x135', '\x137', '\x5', '>', ' ', 
		'\x2', '\x136', '\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\a', '(', '\x2', '\x2', '\x139', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x13A', '\x13B', '\a', '\xF', '\x2', '\x2', '\x13B', '\x13C', 
		'\a', '\x15', '\x2', '\x2', '\x13C', '\x13D', '\a', '\x11', '\x2', '\x2', 
		'\x13D', '\x141', '\a', '\x19', '\x2', '\x2', '\x13E', '\x142', '\x5', 
		'\x18', '\r', '\x2', '\x13F', '\x142', '\a', '\x36', '\x2', '\x2', '\x140', 
		'\x142', '\x5', '\x16', '\f', '\x2', '\x141', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x141', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x145', '\a', '\x1A', '\x2', '\x2', '\x144', '\x146', '\x5', 
		'@', '!', '\x2', '\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14A', '\a', '\xE', '\x2', '\x2', '\x14A', 
		'\x14B', '\a', '\x15', '\x2', '\x2', '\x14B', '\x14C', '\a', '\r', '\x2', 
		'\x2', '\x14C', '\x14D', '\a', '\x19', '\x2', '\x2', '\x14D', '\x14E', 
		'\x5', '.', '\x18', '\x2', '\x14E', '\x14F', '\a', '\x1A', '\x2', '\x2', 
		'\x14F', '\x150', '\a', '\x15', '\x2', '\x2', '\x150', '\x151', '\a', 
		'\x11', '\x2', '\x2', '\x151', '\x154', '\a', '\x19', '\x2', '\x2', '\x152', 
		'\x155', '\x5', '\x18', '\r', '\x2', '\x153', '\x155', '\a', '\x36', '\x2', 
		'\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x154', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x157', '\a', '\x1A', '\x2', '\x2', '\x157', '\x158', '\x5', 
		'@', '!', '\x2', '\x158', '?', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', 
		'\a', '\x3', '\x2', '\x2', '\x15A', '\x15D', '\a', '\x19', '\x2', '\x2', 
		'\x15B', '\x15E', '\x5', '\x18', '\r', '\x2', '\x15C', '\x15E', '\a', 
		'\x36', '\x2', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x160', '\a', '\x1A', '\x2', '\x2', '\x160', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\a', '\x36', '\x2', '\x2', 
		'\x162', '\x163', '\a', '(', '\x2', '\x2', '\x163', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x164', '\x167', '\x5', '\x46', '$', '\x2', '\x165', '\x167', 
		'\x5', 'H', '%', '\x2', '\x166', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x165', '\x3', '\x2', '\x2', '\x2', '\x167', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x169', '\a', '\x12', '\x2', '\x2', '\x169', 
		'\x16A', '\a', '\x19', '\x2', '\x2', '\x16A', '\x16B', '\x5', '.', '\x18', 
		'\x2', '\x16B', '\x16C', '\a', '\x1A', '\x2', '\x2', '\x16C', '\x16D', 
		'\x5', '\f', '\a', '\x2', '\x16D', '\x16E', '\a', '\x13', '\x2', '\x2', 
		'\x16E', 'G', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', '\a', '\x12', 
		'\x2', '\x2', '\x170', '\x171', '\a', '\x15', '\x2', '\x2', '\x171', '\x172', 
		'\a', '\x14', '\x2', '\x2', '\x172', '\x175', '\a', '\x19', '\x2', '\x2', 
		'\x173', '\x176', '\x5', '\x36', '\x1C', '\x2', '\x174', '\x176', '\x5', 
		'V', ',', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x174', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', 
		'\x2', '\x177', '\x178', '\a', '\x1A', '\x2', '\x2', '\x178', '\x179', 
		'\x5', '\f', '\a', '\x2', '\x179', '\x17A', '\a', '\x13', '\x2', '\x2', 
		'\x17A', 'I', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17E', '\x5', 'L', 
		'\'', '\x2', '\x17C', '\x17E', '\x5', 'P', ')', '\x2', '\x17D', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x17D', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\x17E', 'K', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\a', '\x16', 
		'\x2', '\x2', '\x180', '\x181', '\x5', 'N', '(', '\x2', '\x181', '\x182', 
		'\a', '\x36', '\x2', '\x2', '\x182', '\x183', '\x5', 'R', '*', '\x2', 
		'\x183', '\x184', '\a', '&', '\x2', '\x2', '\x184', '\x185', '\x5', '\f', 
		'\a', '\x2', '\x185', '\x186', '\x5', 'Z', '.', '\x2', '\x186', '\x187', 
		'\a', '\'', '\x2', '\x2', '\x187', 'M', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x189', '\t', '\x2', '\x2', '\x2', '\x189', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x18B', '\a', '\x16', '\x2', '\x2', '\x18B', '\x18C', 
		'\a', '\x18', '\x2', '\x2', '\x18C', '\x18D', '\a', '\x36', '\x2', '\x2', 
		'\x18D', '\x18E', '\x5', 'R', '*', '\x2', '\x18E', '\x18F', '\a', '&', 
		'\x2', '\x2', '\x18F', '\x190', '\x5', '\f', '\a', '\x2', '\x190', '\x191', 
		'\a', '\'', '\x2', '\x2', '\x191', 'Q', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x193', '\a', '\x19', '\x2', '\x2', '\x193', '\x194', '\x5', 'T', '+', 
		'\x2', '\x194', '\x195', '\a', '\x1A', '\x2', '\x2', '\x195', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x197', '\x5', 'N', '(', '\x2', '\x197', 
		'\x198', '\a', '\x36', '\x2', '\x2', '\x198', '\x199', '\a', ')', '\x2', 
		'\x2', '\x199', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19E', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'\x19C', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\x5', 'N', '(', 
		'\x2', '\x1A0', '\x1A1', '\a', '\x36', '\x2', '\x2', '\x1A1', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', 'U', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A6', '\a', '\x36', '\x2', '\x2', '\x1A6', '\x1A7', '\a', '\x19', '\x2', 
		'\x2', '\x1A7', '\x1A8', '\x5', 'X', '-', '\x2', '\x1A8', '\x1A9', '\a', 
		'\x1A', '\x2', '\x2', '\x1A9', 'W', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\x1AE', '\a', '\x36', '\x2', '\x2', '\x1AB', '\x1AE', '\x5', ',', '\x17', 
		'\x2', '\x1AC', '\x1AE', '\a', '\x35', '\x2', '\x2', '\x1AD', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\x3', 
		'\x2', '\x2', '\x2', '\x1AF', '\x1B1', '\a', ')', '\x2', '\x2', '\x1B0', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B4', '\x3', '\x2', '\x2', 
		'\x2', '\x1B2', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B9', '\a', 
		'\x36', '\x2', '\x2', '\x1B6', '\x1B9', '\x5', ',', '\x17', '\x2', '\x1B7', 
		'\x1B9', '\a', '\x35', '\x2', '\x2', '\x1B8', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B2', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1C0', '\a', '\x17', '\x2', 
		'\x2', '\x1BE', '\x1C1', '\a', '\x36', '\x2', '\x2', '\x1BF', '\x1C1', 
		'\x5', ',', '\x17', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\a', '(', '\x2', '\x2', '\x1C3', 
		'[', '\x3', '\x2', '\x2', '\x2', '&', '\x61', 'g', '\x89', '\x98', '\x9A', 
		'\x9D', '\xA2', '\xB5', '\xBE', '\xC6', '\xD1', '\xE7', '\xE9', '\xF7', 
		'\xFE', '\x106', '\x10E', '\x119', '\x125', '\x12C', '\x132', '\x136', 
		'\x141', '\x147', '\x154', '\x15D', '\x166', '\x175', '\x17D', '\x19C', 
		'\x1A3', '\x1AD', '\x1B2', '\x1B8', '\x1BB', '\x1C0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
